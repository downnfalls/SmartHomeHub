[
    {
        "id": "a034776e86b5eee6",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/mesh/scan",
        "info": "",
        "x": 2350,
        "y": 2440,
        "wires": []
    },
    {
        "id": "571e5b65b77b38ac",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/mesh/scan",
        "info": "",
        "x": 2600,
        "y": 2440,
        "wires": []
    },
    {
        "id": "b082c695eeedb24a",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Scan Req",
        "func": "if (msg.payload == \"scan\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 2400,
        "wires": [
            [
                "dff42db80c101845"
            ]
        ]
    },
    {
        "id": "e6ca1c4aa1eb06af",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Pong",
        "func": "msg.scan = false;\nmsg.pong = true;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 2200,
        "wires": [
            [
                "4066cb50b029f0c6"
            ]
        ]
    },
    {
        "id": "a3355d03b67eb5c9",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Scan Res",
        "func": "msg.scan = true;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2780,
        "y": 2400,
        "wires": [
            [
                "7e8474d7a8468b7f"
            ]
        ]
    },
    {
        "id": "6d2b6ff6bc6e66e8",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Pair Res",
        "func": "msg.scan = false;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 2560,
        "wires": [
            [
                "9fde819940e1b3d9"
            ]
        ]
    },
    {
        "id": "24a52b974892c75f",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Pair Req",
        "func": "if (msg.pair == \"true\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 2560,
        "wires": [
            [
                "bb2b9ef0429381ce"
            ]
        ]
    },
    {
        "id": "d8ce141196600c25",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/mesh/pair",
        "info": "",
        "x": 2360,
        "y": 2600,
        "wires": []
    },
    {
        "id": "80cc728fe75b8fdf",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/mesh/pair",
        "info": "",
        "x": 2600,
        "y": 2600,
        "wires": []
    },
    {
        "id": "4437803104982b56",
        "type": "ui-template",
        "z": "9babbc837fd78c64",
        "group": "2f692e7cb40097ed",
        "page": "",
        "ui": "",
        "name": "Login Template",
        "order": 2,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template class=\"bg-black-100\">\n  <div class=\"flex flex-col items-center justify-center h-full p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Login</h2>\n    <v-text-field v-model=\"username\" label=\"Username\" outlined></v-text-field>\n    <v-text-field v-model=\"password\" label=\"Password\" type=\"password\" outlined></v-text-field>\n    <p v-if=\"error\" class=\"text-red-500 mt-2\">{{ error }}</p>\n    <v-btn class=\"mt-4\" color=\"primary\" @click=\"login\">Login</v-btn>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n  },\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") == \"true\") {\n      this.redirectScan();\n    }\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg && newMsg.payload) {\n        const user = newMsg.payload;\n        if (this.username === user.username && this.password === user.password) {\n          this.error = \"\";\n          localStorage.setItem(\"loggedIn\", \"true\");\n          this.redirectScan();\n        } else {\n          this.error = \"Invalid username or password\";\n        }\n      }\n    }\n  },\n  methods: {\n    login() {\n      const sendObj = {\n        collection: \"users\",\n        payload: { username: this.username },\n        operation: \"findOne\"\n      };\n      this.send(sendObj);\n    },\n    redirectScan() {\n      // tell Node-RED to switch tab via ui-control\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/scan`;\n    }\n  }\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3200,
        "y": 2500,
        "wires": [
            [
                "5e9f0a65f2212e7c"
            ]
        ]
    },
    {
        "id": "cbaeeb25378a09c6",
        "type": "ui-template",
        "z": "9babbc837fd78c64",
        "group": "8146a75c4508b858",
        "page": "",
        "ui": "",
        "name": "Scan Template",
        "order": 2,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n  <div class=\"mesh-detail\">\n    <!-- Top action buttons: one left, one right -->\n    <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n      <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n          status : \n          <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n            {{ master_status }}\n          </span>\n        </strong>\n      <div>\n        <v-btn outlined @click=\"scanNodes\" style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\">\n          SCAN\n        </v-btn>\n\n        <v-btn color=\"red-darken-1\" outlined @click=\"deleteAllNodes\" class=\"font-weight-bold text-subtitle-1\">\n          RESET !\n        </v-btn>\n      </div>\n    </div>\n\n    <!-- Nodes displayed inline (only mesh_slave: false) -->\n    <div class=\"nodes-container pa-4 rounded-lg\" style=\"background-color: #a2af9b;\">\n      <div v-for=\"(node, index) in nodes_detected.filter(n => !n.mesh_slave)\" :key=\"index\" class=\"node-item\">\n        <!-- Dialog wrapping node button -->\n        <v-dialog v-model=\"node.active\" transition=\"dialog-bottom-transition\" class=\"w-auto\" style=\"max-width: 400px;\">\n          <template v-slot:activator=\"{ props: activatorProps }\">\n            <v-btn v-bind=\"activatorProps\" class=\"pt-2 pb-2\" color=\"primary\" outlined>\n              <div class=\"d-lg-flex d-xs-block\">\n                <div class=\"mr-lg-4\">\n                  Node Name: {{ node.display_name }}\n                  <br /><br />\n                MAC Addr: {{ node.mac_address }}\n                </div>\n                <!-- Delete button stays on card -->\n                <v-btn color=\"red-darken-1\" small class=\"\" @click.stop=\"deleteNode(index)\">\n                  Delete\n                </v-btn>\n              </div>\n            </v-btn>\n          </template>\n\n          <!-- Popup content -->\n          <v-card>\n            <v-toolbar title=\"New Slave\" style=\"background-color: #a2af9b;\"></v-toolbar>\n\n            <v-card-text>\n              <p class=\"mb-2\"><strong>Node Name:</strong> {{ node.display_name }}</p>\n              <p class=\"mb-2\"><strong>MAC Address:</strong> {{ node.mac_address }}</p>\n              <p>\n                <strong>Description:</strong>\n                <v-text-field v-model=\"description\" label=\"Description\" outlined class=\"mt-2\"></v-text-field>\n              </p>\n            </v-card-text>\n\n            <v-card-actions class=\"justify-space-between\">\n              <v-btn style=\"background-color: #a2af9b; color: black\" :loading=\"isLoading\" :disabled=\"isLoading\"\n                @click=\"addSlave(node)\">\n                <template v-slot:loader>\n                  <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n                </template>\n                <span v-if=\"!isLoading\">Pair</span>\n                <span v-else>Loading...</span>\n              </v-btn>\n\n              <v-btn @click=\"cancelAddSlave(node)\" style=\"background-color: #90a4ae; color: black\">\n                Cancel\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </div>\n    </div>\n  </div>\n  <!-- Top notification -->\n  <v-snackbar v-model=\"snackbar\" top absolute :timeout=\"notify_timeout\" :color=\"notify_color\" elevation=\"5\">\n    {{ message }}\n    <template v-slot:actions>\n      <v-btn text @click=\"snackbar = false\">Close</v-btn>\n    </template>\n  </v-snackbar>\n</template>\n\n<script>\n  export default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      nodes_detected: [],\n      description: \"\",\n      pair_display_name: \"\",\n      pair_mac_addr: \"\",\n      master_status: \"offline\",\n      ping_delay: 0,\n      scan_request: false, // filter msg scan\n      pair_request: false, // filter msg pair\n      isLoading: false,\n      snackbar: false, // control notify visibility\n      message: '', // message of notify\n      notify_color: \"teal\",\n      notify_timeout: 0\n    };\n  },\n  mounted() {\n    // invoke logic function\n    this.scanNodes();\n\n    // Load saved nodes from localStorage\n    const savedNodes = localStorage.getItem(\"nodes_detected\");\n    if (savedNodes) {\n      try {\n        this.nodes_detected = JSON.parse(savedNodes).map(n => ({\n          ...n,\n          active: false, // ensure active property exists\n        }));\n      } catch (e) {\n        console.error(\"Failed to parse nodes_detected from localStorage\", e);\n      }\n    }\n\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n      this.redirectLogin();\n    }\n\n    // Load data from localStorage\n\n    const description = localStorage.getItem(\"description\");\n    const pair_display_name = localStorage.getItem(\"pair_display_name\");\n    const pair_mac_addr = localStorage.getItem(\"pair_mac_addr\");\n    const isLoading = localStorage.getItem(\"isLoading\");\n\n    if (description && description != \"\") {\n        this.description = description;\n    }\n\n    if (pair_display_name && pair_display_name != \"\") {\n      this.pair_display_name = pair_display_name;\n    }\n\n    if (pair_mac_addr && pair_mac_addr != \"\") {\n      this.pair_mac_addr = pair_mac_addr;\n    }\n    if (isLoading == \"true\") {\n      this.isLoading = true;\n    } else {\n      this.isLoading = false;\n    }\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        // node scan res handler\n        if (newMsg && newMsg.scan && this.scan_request) {\n          const payload = { ...newMsg.payload };\n          payload.result.forEach(item => {\n            const node = { \n              ...item, \n              mesh_slave: false, \n              active: false \n            };\n\n            const exists = this.nodes_detected.some(\n              n => n.mac_address === node.mac_address && n.display_name === node.display_name\n            );\n\n            if (!exists) {\n              this.nodes_detected.push(node);\n              console.log(\"New node detected:\", node);\n            }\n          });\n          this.scan_request = false; \n        }\n\n        // pong handler\n        if (newMsg && newMsg.pong) {\n          this.master_status = \"online\"\n          if (this.ping_delay < 2) {\n            this.ping_delay += 2;\n          }\n        }\n\n        // pair handler and if have pair successed it will auto allow\n        if (newMsg && newMsg.pair && (this.pair_request || newMsg.payload.mac_address == this.pair_mac_addr)) {\n          this.pair_request = false;\n\n          // check pair status\n          switch (newMsg.payload.info) {\n            case \"pairing to new node.\":\n              // change to loading state\n              this.isLoading = true;\n\n              // Save to localStorage\n              localStorage.setItem(\"description\", this.description);\n              localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n              localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n              localStorage.setItem(\"isLoading\", this.isLoading);\n\n              console.log(\"Info : Wait for pairing..\");\n              this.showNotification(\"Info : Wait for pairing..\", \"blue\");\n              \n              // wait for paired from esp32\n              break;\n            case \"failed to connect to node.\":\n              console.log(\"Error : Failed to connect to node!!\");\n              this.showNotification(\"Error : Failed to connect to node!!\", \"red\");\n              break;\n            case \"pair success!\":\n              console.log(\"Info : Pair succeed!!\");\n              this.showNotification(\"Info : Pair succeed!!\", \"green\");\n\n              // save to mongoDB database\n              const sendObj = {\n                collection: \"nodes\",\n                payload: { \n                  mac_address: newMsg.payload.mac_address,\n                  node_id: newMsg.payload.node_id,\n                  node_type: newMsg.payload.node_type,\n                  description: this.description\n                },\n                operation: \"insertOne\",\n                toMongo: true\n              };\n\n              this.send(sendObj);\n\n              // Set mesh_slave = true so it no longer appears in scan section\n              const targetNode = this.nodes_detected.find(\n                n => n.mac_address === this.pair_mac_addr && n.display_name === this.pair_display_name\n              );\n              if (targetNode) {\n                targetNode.mesh_slave = true;\n                localStorage.setItem(\"nodes_detected\", JSON.stringify(this.nodes_detected));\n              }\n              this.isLoading = false;\n              // reset pairing node info\n              this.description = \"\";\n              this.pair_display_name = \"\";\n              this.pair_mac_addr = \"\";\n\n              // Save to localStorage\n              localStorage.setItem(\"description\", this.description);\n              localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n              localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n              localStorage.setItem(\"isLoading\", this.isLoading);\n              break;\n            default:\n              console.log(\"Some error occurred!!\");\n              this.showNotification(\"Error : Some error occurred!!\", \"red\");\n          }\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    showNotification(msg = 'Notification shown at the top!', color = \"teal\") {\n      this.notify_timeout += 3000;\n      this.message = msg;\n      this.notify_color = color;\n      this.snackbar = true;\n      // Optional: send message to Node-RED backend\n      this.$emit('send', { payload: 'top_notification_shown' });\n    },\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    deleteNode(index) {\n      this.nodes_detected.splice(index, 1);\n      localStorage.setItem(\n        \"nodes_detected\",\n        JSON.stringify(this.nodes_detected)\n      );\n    },\n    deleteAllNodes() {\n      if (confirm(\"Are you sure you want to delete all nodes?\")) {\n        this.nodes_detected = [];\n        localStorage.removeItem(\"nodes_detected\");\n        const sendObj = {\n          collection: \"nodes\",\n          operation: \"drop\",\n          toMongo: true\n        };\n        this.send(sendObj);\n      }\n    },\n    addSlave(node) {\n      this.pair_display_name = node.display_name;\n      this.pair_mac_addr = node.mac_address;\n\n      // send pairing request\n      const sendObj = {\n        payload : node.mac_address,\n        pair : \"true\"\n      };\n      this.pair_request = true;\n      \n      // handle master offline\n      if (this.master_status == \"offline\") {\n        console.log(\"Error : Master is offline!!\");\n        this.showNotification(\"Error : Master is offline!!\", \"red\");\n        return;\n      }\n\n      if (this.isLoading) {\n        console.log(\"Warning : Cannot pair node while pairing!!\");\n        this.showNotification(\"Warning : Cannot pair node while pairing!!\", \"yellow\");\n        return;\n      }\n\n      this.send(sendObj);\n\n      // Send message to Node-RED backend\n      this.$emit('send', { payload: 'button_clicked' });\n    },\n    scanNodes() {\n      const sendObj = {\n        payload: \"scan\"\n      };\n      this.scan_request = true; \n      this.send(sendObj);\n    },\n    cancelAddSlave(node) {\n      if (this.isLoading == false) {\n        // close dialog pop up\n        node.active = false;\n      } else {\n        if (confirm(\"Do you want to cancel ?\\n[ cancel after pairing you have to sync mesh ]\")) {\n          this.isLoading = false;\n          this.pair_display_name = \"\";\n          this.pair_mac_addr = \"\";\n          this.description = \"\";\n\n          // Save to localStorage\n          localStorage.setItem(\"description\", this.description);\n          localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n          localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n          localStorage.setItem(\"isLoading\", this.isLoading);\n\n          // close dialog pop up\n          node.active = false;\n        }\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n  .top-buttons {\n    margin: 10px;\n  }\n\n  .mesh-detail {\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n  }\n\n  .nodes-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n\n  .node-item {\n    display: inline-block;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2480,
        "y": 2320,
        "wires": [
            [
                "5c304d9f1487ad87"
            ]
        ]
    },
    {
        "id": "c31b291f58377439",
        "type": "ui-template",
        "z": "9babbc837fd78c64",
        "group": "dd337cb0663d76c3",
        "page": "",
        "ui": "",
        "name": "Home Template",
        "order": 2,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n  <div style=\"display: flex; flex-direction: column\" class=\"ma-3\">\n    <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n      <div>\n        <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4 mr-4\">\n          status :\n          <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n            {{ master_status }}\n          </span>\n        </strong>\n        <v-btn\n            outlined\n            style=\"background-color: #a2af9b; color: black\"\n            class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4\"\n            @click=\"updateConfigRelay\"\n          >\n          <v-icon>mdi-refresh</v-icon>\n        </v-btn>\n      </div>\n      <div>\n        <v-btn\n          outlined\n          @click=\"refreshPage\"\n          style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n        >\n          REFRESH\n        </v-btn>\n        <v-btn\n          outlined\n          style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4\"\n          :loading=\"isLoading\"\n          :disabled=\"isLoading\"\n          @click=\"syncSlave\"\n        >\n          <template v-slot:loader>\n            <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n          </template>\n          <span v-if=\"!isLoading\">SYNC</span>\n          <span v-else>Loading...</span>\n        </v-btn>\n      </div>\n    </div>\n    <v-row class=\"mt-5 pa-4 rounded-lg\" style=\"background-color: #a2af9b; color: black\">\n      <v-col\n        v-for=\"(node, index) in slave_nodes\"\n        :key=\"index\"\n        cols=\"12\"\n        sm=\"6\"\n        md=\"3\"\n      >\n        <v-sheet\n          class=\"pa-3 text-subtitle-1 text-blue-grey-darken-4 rounded-lg\"\n          elevation=\"1\"\n          color=\"primary\"\n        >\n          <v-sheet color=\"primary\">\n            <div class=\"d-flex justify-space-between align-center\">\n              <strong>STATUS :\n                <span :class=\"node.node_status === 'online' ? 'text-teal text-uppercase' : 'text-red-darken-2 text-uppercase'\">\n                  {{ node.node_status }}\n                </span>\n              </strong>\n              <div>\n                <v-btn\n                  icon=\"mdi-cog\"\n                  size=\"small\"\n                  variant=\"text\"\n                  @click.stop=\"showNodePopup(node)\"\n                  :disabled=\"node.node_status === 'offline'\"\n                ></v-btn>\n                <v-btn\n                  icon=\"mdi-delete\"\n                  size=\"small\"\n                  variant=\"text\"\n                  color=\"red-darken-2\"\n                  @click.stop=\"unpairNode(node)\"\n                  :disabled=\"node.node_status === 'offline'\"\n                ></v-btn>\n              </div>\n            </div>\n            <div class=\"d-flex align-center\">\n              <span class=\"mr-2\">Node Name :</span>\n              <span\n                v-if=\"editingNodeMac !== node.mac_address\"\n                @click.stop=\"startEditing(node)\"\n                style=\"cursor: pointer;\"\n                class=\"font-weight-bold\"\n              >\n                {{ node.name || 'Mesh Node' }}\n              </span>\n              <v-text-field\n                v-else\n                v-model=\"editingNodeName\"\n                @keyup.enter=\"saveNodeName\"\n                @blur=\"saveNodeName\"\n                @click.stop\n                dense\n                autofocus\n                single-line\n                hide-details\n              ></v-text-field>\n            </div>\n            <p>MAC Addr : {{ node.mac_address }}</p>\n            <p>Node ID : {{ node.node_id }}</p>\n            <p>Node Type : {{ node.node_type }}</p>\n            <p>Description : {{ node.description }}</p>\n            \n            <div v-if=\"node.node_type === 'sensor' && node.state && node.state.i2c && node.node_status == 'online'\" class=\"mt-2\">\n              <v-divider class=\"my-1\"></v-divider>\n              <p v-for=\"(value, key) in node.state.i2c\" :key=\"key\" class=\"mb-0 text-caption\">\n                <strong class=\"text-capitalize font-weight-bold\">{{ key }}:</strong> {{ value }}\n              </p>\n              <v-divider class=\"mt-1\"></v-divider>\n            </div>\n            <div v-if=\"node.node_type === 'relay' && node.node_status === 'online'\">\n              \n              <v-btn\n                class=\"mb-2 mt-2\"\n                block\n                color=\"blue-grey-darken-1\"\n                @click=\"setManualMode(node)\"\n              >\n                {{ node.manual_mode ? 'AUTO' : 'MANUAL' }}\n              </v-btn>\n              <v-divider class=\"my-2\"></v-divider>\n              <div class=\"d-flex justify-space-around\">\n                <v-switch\n                  v-model=\"node.state.r1\"\n                  label=\"Relay 1\"\n                  color=\"teal\"\n                  inset\n                  hide-details\n                  :disabled=\"!node.manual_mode\"\n                  @change.stop=\"toggleRelay(node, 'r1')\"\n                ></v-switch>\n                <v-switch\n                  v-model=\"node.state.r2\"\n                  label=\"Relay 2\"\n                  color=\"teal\"\n                  inset\n                  hide-details\n                  :disabled=\"!node.manual_mode\"\n                  @change.stop=\"toggleRelay(node, 'r2')\"\n                ></v-switch>\n              </div>\n            </div>\n          </v-sheet>\n        </v-sheet>\n      </v-col>\n    </v-row>\n    <v-dialog v-model=\"dialog\" max-width=\"600\">\n      <v-card v-if=\"selectedNode\">\n        <div class=\"text-h6 text-center text-blue-grey-darken-4 pa-3\" style=\"background-color: #a2af9b;\">\n          {{ selectedNode.name || 'Mesh Node' }}\n        </div>\n        \n        <v-list v-if=\"selectedNode.node_type === 'sensor' && editableNodeConfig.state && editableNodeConfig.state.gpio\">\n          <v-list-item \n            v-for=\"(gpioConfig, gpioPin) in editableNodeConfig.state.gpio\" \n            :key=\"gpioPin\"\n          >\n            <div class=\"d-flex flex-column flex-sm-row justify-space-between align-center\">\n              <div class=\"font-weight-bold mb-2 mb-sm-0\">\n                {{ gpioPin }}\n              </div>\n              <v-btn-toggle\n                v-model=\"gpio_config.mode[gpioPin]\"\n                variant=\"outlined\"\n                divided\n                density=\"compact\"\n              >\n                <v-btn \n                  value=\"button\" \n                  @click=\"updateGpioConfig(gpioPin, 'button')\" \n                >Button</v-btn>\n                <v-btn \n                  value=\"toggle\" \n                  @click=\"updateGpioConfig(gpioPin, 'toggle')\" \n                >Toggle</v-btn>\n                <v-btn \n                  value=\"delay\" \n                  @click=\"updateGpioConfig(gpioPin, 'delay')\" \n                >Delay</v-btn>\n              </v-btn-toggle>\n            </div>\n          </v-list-item>\n        </v-list>\n        <v-list v-else-if=\"selectedNode.node_type === 'relay'\">\n          <v-list-item>\n            <div class=\"d-flex flex-column flex-sm-row flex-wrap align-start align-sm-center\">\n              <strong class=\"mr-sm-4 mb-2 mb-sm-0\">Relay 1:</strong>\n              <div style=\"width: 100%;\" class=\"d-flex flex-column flex-sm-row flex-wrap align-start align-sm-center\">\n                <v-select\n                  v-model=\"editableNodeConfig.state.r1_sensor\"\n                  :items=\"sensorNodeList\"\n                  label=\"Sensor Node\"\n                  dense outlined hide-details\n                  class=\"mr-sm-2 mb-2 mb-sm-0 w-100 w-sm-auto\"\n                  style=\"max-width: 150px;\"\n                ></v-select>\n                <v-select\n                  v-model=\"editableNodeConfig.state.r1_sensor_type\"\n                  :items=\"['gpio', 'i2c']\"\n                  label=\"Type\"\n                  dense outlined hide-details\n                  class=\"mr-sm-2 mb-2 mb-sm-0 w-100 w-sm-auto\"\n                  style=\"max-width: 100px;\"\n                ></v-select>\n              </div>\n              <div class=\"d-flex flex-column\" style=\"width: 100%;\">\n                <span class=\"text-caption mb-1\" :class=\"{ 'text-disabled': !editableNodeConfig.state.r1_sensor_type }\">Pin/Addr:</span>\n                <v-btn-toggle\n                  v-model=\"editableNodeConfig.state.r1_sensor_pin\"\n                  variant=\"outlined\"\n                  density=\"compact\"\n                  divided\n                  :disabled=\"!editableNodeConfig.state.r1_sensor_type\"\n                  class=\"flex-wrap\"\n                >\n                  <v-btn\n                    v-for=\"pin in r1_sensor_pins\"\n                    :key=\"pin\"\n                    :value=\"pin\"\n                    class=\"flex-grow-1\"\n                  >\n                    {{ pin }}\n                  </v-btn>\n                </v-btn-toggle>\n              </div>\n              <div class=\"d-flex flex-column\" style=\"width: 100%;\">\n                <v-text-field\n                  v-if=\"editableNodeConfig.state.r1_sensor && editableNodeConfig.state.r1_sensor_type && editableNodeConfig.state.r1_sensor_type == 'i2c' && editableNodeConfig.state.r1_sensor_pin\"\n                  v-model=\"editableNodeConfig.state.r1_condition_name\"\n                  label=\"Work Condition Ex: >30\"\n                  dense\n                  outlined\n                  hide-details\n                  class=\"mt-4\"\n                ></v-text-field>\n                <v-btn-toggle\n                  v-if=\"editableNodeConfig.state.r1_sensor && editableNodeConfig.state.r1_sensor_type && editableNodeConfig.state.r1_sensor_type == 'gpio' && editableNodeConfig.state.r1_sensor_pin\"\n                  v-model=\"editableNodeConfig.state.r1_condition_name\"\n                  variant=\"outlined\"\n                  density=\"compact\"\n                  divided\n                  class=\"mt-4\"\n                >\n                  <v-btn :value=\"true\">TRUE</v-btn>\n                  <v-btn :value=\"false\">FAlSE</v-btn>\n                </v-btn-toggle>\n              </div>\n            </div>\n          </v-list-item>\n          <v-divider></v-divider>\n          <v-list-item>\n            <div class=\"d-flex flex-column flex-sm-row flex-wrap align-start align-sm-center\">\n              <strong class=\"mr-sm-4 mb-2 mb-sm-0\">Relay 2:</strong>\n              <div style=\"width: 100%;\" class=\"d-flex flex-column flex-sm-row flex-wrap align-start align-sm-center\">\n                <v-select\n                  v-model=\"editableNodeConfig.state.r2_sensor\"\n                  :items=\"sensorNodeList\"\n                  label=\"Sensor Node\"\n                  dense outlined hide-details\n                  class=\"mr-sm-2 mb-2 mb-sm-0 w-100 w-sm-auto\"\n                  style=\"max-width: 150px;\"\n                ></v-select>\n                <v-select\n                  v-model=\"editableNodeConfig.state.r2_sensor_type\"\n                  :items=\"['gpio', 'i2c']\"\n                  label=\"Type\"\n                  dense outlined hide-details\n                  class=\"mr-sm-2 mb-2 mb-sm-0 w-100 w-sm-auto\"\n                  style=\"max-width: 100px;\"\n                ></v-select>\n              </div>\n              <div class=\"d-flex flex-column\" style=\"width: 100%;\">\n                <span class=\"text-caption mb-1\" :class=\"{ 'text-disabled': !editableNodeConfig.state.r2_sensor_type }\">Pin/Addr:</span>\n                <v-btn-toggle\n                  v-model=\"editableNodeConfig.state.r2_sensor_pin\"\n                  variant=\"outlined\"\n                  density=\"compact\"\n                  divided\n                  :disabled=\"!editableNodeConfig.state.r2_sensor_type\"\n                  class=\"flex-wrap\"\n                >\n                  <v-btn\n                    v-for=\"pin in r2_sensor_pins\"\n                    :key=\"pin\"\n                    :value=\"pin\"\n                    class=\"flex-grow-1\"\n                  >\n                    {{ pin }}\n                  </v-btn>\n                </v-btn-toggle>\n              </div>\n              <div class=\"d-flex flex-column\" style=\"width: 100%;\">\n                <v-text-field\n                  v-if=\"editableNodeConfig.state.r2_sensor && editableNodeConfig.state.r2_sensor_type && editableNodeConfig.state.r2_sensor_type == 'i2c' && editableNodeConfig.state.r2_sensor_pin\"\n                  v-model=\"editableNodeConfig.state.r2_condition_name\"\n                  label=\"Work Condition Ex: >30\"\n                  dense\n                  outlined\n                  hide-details\n                  class=\"mt-4\"\n                ></v-text-field>\n                <v-btn-toggle\n                  v-if=\"editableNodeConfig.state.r2_sensor && editableNodeConfig.state.r2_sensor_type && editableNodeConfig.state.r2_sensor_type == 'gpio' && editableNodeConfig.state.r2_sensor_pin\"\n                  v-model=\"editableNodeConfig.state.r2_condition_name\"\n                  variant=\"outlined\"\n                  density=\"compact\"\n                  divided\n                  class=\"mt-4\"\n                >\n                  <v-btn :value=\"true\">TRUE</v-btn>\n                  <v-btn :value=\"false\">FAlSE</v-btn>\n                </v-btn-toggle>\n              </div>\n            </div>\n          </v-list-item>\n        </v-list>\n        \n        <v-card-actions class=\"pa-3\">\n          <v-btn\n            v-if=\"selectedNode.node_type === 'sensor'\"\n            style=\"background-color: #a2af9b; color: black\"\n            text\n            @click=\"saveNodeConfig\"\n          >\n            Save\n          </v-btn>\n          <v-btn\n            v-if=\"selectedNode.node_type === 'relay' && !selectedNode.config\"\n            style=\"background-color: #a2af9b; color: black\"\n            text\n            @click=\"saveNodeConfig\"\n          >\n            Save\n          </v-btn>\n          <v-btn\n            v-if=\"selectedNode.node_type === 'relay' && selectedNode.config\"\n            style=\"background-color: rgb(211, 59, 59); color: white\"\n            text\n            @click=\"deleteConfig(selectedNode)\"\n          >\n            Delete\n          </v-btn>\n          <v-spacer></v-spacer>\n          <v-btn \n            style=\"background-color: #90a4ae; color: black\" \n            text\n            @click=\"closeDialog\"\n          >\n            Close\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-snackbar\n      v-model=\"snackbar\"\n      top\n      absolute\n      :timeout=\"notify_timeout\"\n      :color=\"notify_color\"\n      elevation=\"5\"\n    >\n      {{ message }}\n      <template v-slot:actions>\n        <v-btn text @click=\"snackbar = false\">Close</v-btn>\n      </template>\n    </v-snackbar>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"NodeManager\",\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n      this.redirectLogin();\n    }\n    this.getNodesMongoDB();\n    this.checkNodeStatus(); \n  },\n  data() {\n    return {\n      slave_nodes: [],\n      getNode_request: false,\n      ping_delay: 0,\n      allNode_request: false,\n      activeNode_request: false,\n      unpair_request: false,\n      gpioConfig_request: false,\n      getGpioConfig_request: false,\n      relayConfig_request: false,\n      getRelayConfig_request: false,\n      removeConfig_request: false,\n      toAuto_request: false,\n      toManual_request: false,\n      isLoading: false,\n      master_status: \"offline\",\n      editingNodeMac: null,\n      editingNodeName: \"\",\n      dialog: false,\n      selectedNode: null,\n      editableNodeConfig: null, // Temporary storage for edits in the dialog\n      snackbar: false,\n      message: '',\n      notify_color: \"teal\",\n      notify_timeout: 0,\n      gpio_config: {\n        node_id: \"\",\n        mode: {}\n      },\n    };\n  },\n  computed: {\n    // Returns a list of online sensor nodes for the dropdowns\n    sensorNodeList() {\n      return this.slave_nodes\n        .filter(n => n.node_type === 'sensor' && n.node_status === 'online')\n        .map(n => n.name || n.mac_address);\n    },\n    // Dynamically gets the available pins for the Relay 1 sensor\n    r1_sensor_pins() {\n      if (!this.editableNodeConfig || !this.editableNodeConfig.state.r1_sensor || !this.editableNodeConfig.state.r1_sensor_type) {\n        return [];\n      }\n      \n      const selectedNodeName = this.editableNodeConfig.state.r1_sensor;\n      const node = this.slave_nodes.find(n => (n.name === selectedNodeName || n.mac_address === selectedNodeName));\n      \n      if (!node || !node.state) return [];\n      const type = this.editableNodeConfig.state.r1_sensor_type;\n      if (type === 'gpio' && node.state.gpio) {\n        return Object.keys(node.state.gpio);\n      }\n      if (type === 'i2c' && node.state.i2c) { // Assuming i2c data might exist at node.state.i2c\n        return Object.keys(node.state.i2c);\n      }\n      \n      return [];\n    },\n    // Dynamically gets the available pins for the Relay 2 sensor\n    r2_sensor_pins() {\n      if (!this.editableNodeConfig || !this.editableNodeConfig.state.r2_sensor || !this.editableNodeConfig.state.r2_sensor_type) {\n        return [];\n      }\n      \n      const selectedNodeName = this.editableNodeConfig.state.r2_sensor;\n      const node = this.slave_nodes.find(n => (n.name === selectedNodeName || n.mac_address === selectedNodeName));\n      \n      if (!node || !node.state) return [];\n      const type = this.editableNodeConfig.state.r2_sensor_type;\n      if (type === 'gpio' && node.state.gpio) {\n        return Object.keys(node.state.gpio);\n      }\n      if (type === 'i2c' && node.state.i2c) {\n        return Object.keys(node.state.i2c);\n      }\n      \n      return [];\n    }\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg.type == \"MONGO_DB\" && this.getNode_request) {\n        this.isLoading = false;\n        this.slave_nodes = Object.values(newMsg.payload).map(node => ({\n          ...node,\n          node_status: \"offline\",\n          manual_mode: false,\n        }));\n        this.getNode_request = false;\n      }\n      if (newMsg.type == \"PONG\") {\n        this.master_status = \"online\";\n        if (this.ping_delay < 2) {\n          this.ping_delay += 2;\n        }\n      }\n      if (newMsg.type == \"ACTIVE_NODE\" && this.activeNode_request) {\n        this.activeNode_request = false;\n        this.slave_nodes = this.slave_nodes.map(node => {\n          const key = node.mac_address;\n          if (newMsg.payload[key] && newMsg.payload[key].state) {\n            if (node.manual_mode == false) {\n              return {\n                ...node,\n                state: newMsg.payload[key]?.state || {},\n                node_status: \"online\"\n              };\n            } else {\n              return {\n                ...node,\n                node_status: \"online\"\n              };\n            }\n          } else {\n            return {\n              ...node,\n              node_status: \"offline\"\n            };\n          }\n        });\n      }\n      if (newMsg.type == \"ALL_NODE\" && this.allNode_request) {\n        this.allNode_request = false;\n        const dropObj = {\n          collection: \"nodes\",\n          payload: {},\n          operation: \"deleteMany\",\n          type: \"MONGO_DB\"\n        };\n        this.send(dropObj);\n        setTimeout(() => {\n          const insertObj = {\n            collection: \"nodes\",\n            payload: [Object.values(newMsg.payload)],\n            operation: \"insertMany\",\n            type: \"MONGO_DB\"\n          };\n          this.send(insertObj);\n          this.getNodesMongoDB();\n          this.showNotification(`Sync succeeded`, \"green\");\n        }, 1500);\n      }\n      \n      if (newMsg.type == \"UNPAIR_NODE\" && this.unpair_request) {\n        const deleteObj = {\n          collection: \"nodes\",\n          operation: \"deleteOne\",\n          type: \"MONGO_DB\",\n          payload: [{ mac_address: newMsg.payload.mac_address }]\n        };\n        this.send(deleteObj);\n        this.slave_nodes = this.slave_nodes.filter(\n          (n) => n.mac_address !== newMsg.payload.mac_address\n        );\n        this.unpair_request = false;\n        this.showNotification(`Unpair ${newMsg.payload.mac_address} succeeded`, \"green\");\n      }\n      if (newMsg.type == \"UPDATE_GPIO_CONFIG\" && this.gpioConfig_request) {\n        this.gpioConfig_request = false;\n        this.showNotification(`node_id : ${newMsg.payload.node_id} GPIO configuration updated successfully`, \"green\");\n      }\n      if (newMsg.type == \"GET_GPIO_CONFIG\" && this.getGpioConfig_request) {\n        this.getGpioConfig_request = false;\n        if (newMsg.payload && newMsg.payload.mode) {\n          this.gpio_config = {\n            node_id: newMsg.payload.node_id,\n            mode: newMsg.payload.mode\n          };\n        } else {\n          this.gpio_config = {\n            node_id: \"\",\n            mode: {}\n          };\n        }\n      }\n      if (newMsg.type == \"RELAY_CONFIG\" && this.relayConfig_request) {\n        this.relayConfig_request = false;\n        this.showNotification(`node_id : ${newMsg.payload.node_id} Relay configuration updated successfully`, \"green\");\n        this.updateConfigRelay();\n      }\n      if (newMsg.type == \"GET_RELAY_CONFIG\" && this.getRelayConfig_request) {\n        this.getRelayConfig_request = false;\n        const updatedRelays = Object.keys(newMsg.payload || {});\n        this.slave_nodes = this.slave_nodes.map(node => {\n          if (node.node_type === 'relay') {\n            const updatedRelay = updatedRelays.find(r => r == node.node_id);\n            if (updatedRelay) {\n              return {\n                ...node,\n                config: {\n                  [node.node_id]: newMsg.payload[updatedRelay]\n                }\n              };\n            }\n          }\n          return node;\n        });\n        // drop all and insert again\n        this.allNode_request = false;\n        const dropObj = {\n          collection: \"nodes\",\n          payload: {},\n          operation: \"deleteMany\",\n          type: \"MONGO_DB\"\n        };\n        this.send(dropObj);\n        \n        // add all node again\n        setTimeout(() => {\n          const insertObj = {\n            collection: \"nodes\",\n            payload: [Object.values(this.slave_nodes)],\n            operation: \"insertMany\",\n            type: \"MONGO_DB\"\n          };\n          this.send(insertObj);\n          this.getNodesMongoDB();\n          this.showNotification(`Sync succeeded`, \"green\");\n        }, 1500);\n      }\n      if (newMsg.type == \"REMOVE_CONFIG\" && this.removeConfig_request) {\n        this.removeConfig_request = false;\n        this.showNotification(`node_id : ${newMsg.payload.node_id} configuration removed successfully`, \"green\");\n        this.updateConfigRelay();\n      }\n      if (newMsg.type == \"REMOVE_CONFIG\" && this.toManual_request) {\n        this.toManual_request = false;\n        // change auto mode to manual mode\n        this.slave_nodes = this.slave_nodes.map(node => {\n          if (node.node_id === newMsg.payload.node_id) {\n            return {\n              ...node,\n              manual_mode: true\n            };\n          }\n          return node;\n        });\n      }\n      if (newMsg.type == \"RELAY_CONFIG\" && this.toAuto_request) {\n        this.toAuto_request = false;\n        // change manual mode to auto mode\n        this.slave_nodes = this.slave_nodes.map(node => {\n          if (node.node_id === newMsg.payload.node_id) {\n            return {\n              ...node,\n              manual_mode: false\n            };\n          }\n          return node;\n        }); \n      }\n      if (newMsg.type == \"GET_GPIO_CONFIG\" && this.getGpioConfig_request) {\n        this.snackbar = false;\n    }\n  },\n  methods: {\n    getGpioConfig() {\n      if (this.master_status !== \"online\") {\n        this.showNotification(\"Master node is offline. Cannot fetch GPIO configurations.\", \"red\");\n        return;\n      }\n      const configObj = {\n        payload: \"getConfig\",\n        type: \"GET_GPIO_CONFIG\",\n      };\n      this.getGpioConfig_request = true;\n      this.send(configObj);\n    },\n    updateConfigRelay() {\n      if (this.master_status !== \"online\") {\n        this.showNotification(\"Master node is offline. Cannot fetch relay configurations.\", \"red\");\n        return;\n      }\n      const configObj = {\n        payload: \"getConfig\",\n        type: \"GET_RELAY_CONFIG\",\n      };\n      this.getRelayConfig_request = true;\n      this.send(configObj);\n    },\n    saveNodeConfig() {\n      if (!this.selectedNode) return;\n      if (this.selectedNode.node_type === 'sensor') {\n        this.saveSensorConfig();\n      } else if (this.selectedNode.node_type === 'relay') {\n        this.saveRelayConfig();\n      }\n    },\n    saveRelayConfig() {\n      // map editableNodeConfig r1_sensor to node_id\n      if (!this.editableNodeConfig) return;\n      const r1_sensor_node = this.slave_nodes.find(n => (n.name === this.editableNodeConfig.state.r1_sensor || n.mac_address === this.editableNodeConfig.state.r1_sensor));\n      const r2_sensor_node = this.slave_nodes.find(n => (n.name === this.editableNodeConfig.state.r2_sensor || n.mac_address === this.editableNodeConfig.state.r2_sensor));\n      const configObj = {\n        payload: {\n          [this.editableNodeConfig.node_id]: {\n            r1: {\n              node_id: r1_sensor_node ? r1_sensor_node.node_id : null,\n              condition: `${this.editableNodeConfig.state.r1_sensor_pin}|${this.editableNodeConfig.state.r1_condition_name}` || null,\n            },\n            r2: {\n              node_id: r2_sensor_node ? r2_sensor_node.node_id : null,\n              condition: `${this.editableNodeConfig.state.r2_sensor_pin}${this.editableNodeConfig.state.r2_condition_name}` || null,\n            }\n          }\n        },\n        type: \"RELAY_CONFIG\",\n      };\n      this.send(configObj);\n      this.showNotification(\"Saving relay configuration...\", \"blue\");\n      this.relayConfig_request = true;\n      this.closeDialog();\n    },\n    saveSensorConfig() {\n      const updateObj = {\n        payload: this.gpio_config,\n        type: \"UPDATE_GPIO_CONFIG\",\n      };\n      this.send(updateObj);\n      this.gpioConfig_request = true;\n      this.showNotification(\"Saving GPIO configuration...\", \"blue\");\n      this.closeDialog();\n    },\n    closeDialog() {\n      this.dialog = false;\n      this.gpio_config = {\n        node_id: \"\",\n        mode: {}\n      };\n      this.selectedNode = null;\n      this.editableNodeConfig = null;\n    },\n    updateGpioConfig(gpioPin, newType) {\n      this.gpio_config.mode[gpioPin] = newType;\n    },\n    showNotification(msg = 'Notification shown at the top!', color = \"teal\") {\n      this.notify_timeout += 3000;\n      this.message = msg;\n      this.notify_color = color;\n      this.snackbar = true;\n      this.$emit('send', { payload: 'top_notification_shown' });\n    },\n    unpairNode(node) {\n      if (this.master_status !== \"online\") {\n        this.showNotification(\"Master node is offline. Cannot fetch relay configurations.\", \"red\");\n        return;\n      }\n      if (node.node_status == \"online\") {\n        if (confirm(`Are you sure you want to unpair the node \"${node.name || node.mac_address}\"?`)) {\n          const unpairObj = {\n            payload: node.node_id,\n            type: \"UNPAIR_NODE\",\n          }\n          this.send(unpairObj);\n          this.unpair_request = true;\n          this.showNotification(\"Unpairing...\", \"blue\");\n        }\n      } else {\n        this.showNotification(`This ${node.mac_address} is offline`, \"red\");\n      }\n    },\n    setManualMode(node) {\n      if (!node.manual_mode) {\n        const removeObj = {\n          payload: node.node_id,\n          type: \"REMOVE_CONFIG\",\n        }\n        this.send(removeObj);\n        this.toManual_request = true;\n        this.showNotification(`Toggle ${node.name || node.mac_address} to manual....`, \"blue\");\n      } else {\n        if (node.config) {\n          const configObj = {\n            payload: node.config,\n            type: \"RELAY_CONFIG\",\n          };\n          this.send(configObj);\n          this.toAuto_request = true;\n          this.showNotification(`Toggle ${node.name || node.mac_address} to auto....`, \"blue\");\n        } else {\n          this.showNotification(\"No configuration found for this relay node. Please set up the configuration first.\", \"red\");\n          return;\n        }\n      }\n    },\n    toggleRelay(node) {\n      if (!node || !node.state) {\n        return;\n      }\n      const commandObj = {\n        type: \"RELAY_CONTROL\",\n        payload: {\n          node_id: node.node_id,\n          state: {\n            \"r1\": node.state.r1,\n            \"r2\": node.state.r2,\n          },\n        }\n      };\n      this.send(commandObj);\n    },\n    showNodePopup(node) {\n      if (master_status)\n      if (node.node_type == \"sensor\") {\n        let default_gpio = node.state.gpio || {};\n        for (let key in default_gpio) {\n          default_gpio[key] = \"button\";\n        } \n        this.gpio_config = {\n          node_id: node.node_id,\n          mode: default_gpio || {}\n        };\n        this.getGpioConfig();\n      }\n      this.selectedNode = node;\n      this.editableNodeConfig = JSON.parse(JSON.stringify(node));\n      this.dialog = true;\n    },\n    startEditing(node) {\n      this.editingNodeMac = node.mac_address;\n      this.editingNodeName = node.name || '';\n    },\n    saveNodeName() {\n      if (!this.editingNodeMac) return;\n      const nodeToUpdate = this.slave_nodes.find(n => n.mac_address === this.editingNodeMac);\n      if (nodeToUpdate) {\n        nodeToUpdate.name = this.editingNodeName;\n        const updateObj = {\n          collection: \"nodes\",\n          operation: \"updateOne\",\n          type: \"MONGO_DB\",\n          payload: [\n            { mac_address: this.editingNodeMac },\n            { $set: { name: this.editingNodeName } }\n          ]\n        };\n        this.send(updateObj);\n      }\n      this.editingNodeMac = null;\n      this.editingNodeName = \"\";\n    },\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    getNodesMongoDB() {\n      const sendObj = {\n        collection: \"nodes\",\n        operation: \"find.toArray\",\n        type: \"MONGO_DB\"\n      };\n      this.getNode_request = true;\n      this.send(sendObj);\n    },\n    checkNodeStatus() {\n      const sendObj = { payload: \"active\", type: \"ACTIVE_NODE\" };\n      setInterval(() => {\n        if (this.master_status == \"online\") {\n          this.activeNode_request = true;\n          this.send(sendObj);\n        }\n      }, 10000);\n    },\n    syncSlave() {\n      if (this.master_status !== \"online\") {\n        this.showNotification(\"Master node is offline. Cannot fetch relay configurations.\", \"red\");\n        return;\n      }\n      this.allNode_request = true;\n      const sendObj = { payload: \"getAllNode\", type: \"ALL_NODE\" };\n      this.send(sendObj);\n      this.isLoading = true;\n    },\n    refreshPage() {\n      window.location.reload();\n    },\n    removeConfig(node) {\n      const removeObj = {\n        payload: node.node_id,\n        type: \"REMOVE_CONFIG\",\n      }\n      this.send(removeObj);\n      this.removeConfig_request = true;\n    },\n    deleteConfig(node) {\n      if (confirm(`Are you sure you want to delete the configuration for the node \"${node.name || node.mac_address}\"?`)) {\n        this.removeConfig(node);\n        this.showNotification(\"Removing configuration...\", \"blue\");\n        this.closeDialog();\n      }\n    },\n  }\n}\n}\n</script>\n<style scoped>\n/* Add any component-specific styles here */\n</style>\n\n<!-- \n\n- get gpio config\n- get relay config on get active payload\n\n-->",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3760,
        "y": 1480,
        "wires": [
            [
                "1fef39c64102d6cc"
            ]
        ],
        "inputLabels": [
            "tyesty"
        ]
    },
    {
        "id": "12add683d48498c8",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/mesh/pair",
        "info": "",
        "x": 2600,
        "y": 2520,
        "wires": []
    },
    {
        "id": "08a643a12e45ea8d",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Active Node Req",
        "func": "if (msg.type == \"ACTIVE_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2180,
        "wires": [
            [
                "1393b8618adddcbc",
                "d26c94cf362561d9"
            ]
        ]
    },
    {
        "id": "f766010993eee160",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Active Node Res",
        "func": "msg.type = \"ACTIVE_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 2180,
        "wires": [
            [
                "d86286d67bc9b05d"
            ]
        ]
    },
    {
        "id": "ac44ab6bb9b672d1",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter All Node Req",
        "func": "if (msg.type == \"ALL_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 1100,
        "wires": [
            [
                "136ebb98c89c58b7"
            ]
        ]
    },
    {
        "id": "e696f281a8719a4b",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter All Node Res",
        "func": "msg.type = \"ALL_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4090,
        "y": 1100,
        "wires": [
            [
                "ba68d91397db322e"
            ]
        ]
    },
    {
        "id": "4cbf378203bdf174",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Req Mongo",
        "func": "if (msg.type == \"MONGO_DB\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3630,
        "y": 2320,
        "wires": [
            [
                "8833dedb1da9ed3e"
            ]
        ]
    },
    {
        "id": "2a047d38fe7938a8",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Res Mongo",
        "func": "if (!msg.payload.result) {\n    msg.type = \"MONGO_DB\";\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3930,
        "y": 2320,
        "wires": [
            [
                "52d3ab4215a54733"
            ]
        ]
    },
    {
        "id": "537555a50dc11621",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Mongo",
        "func": "if (msg.toMongo){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 2200,
        "wires": [
            [
                "612854fbcf2f857f"
            ]
        ]
    },
    {
        "id": "8e6236e6d1527f9f",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/mesh/allnodes",
        "info": "",
        "x": 3620,
        "y": 1060,
        "wires": []
    },
    {
        "id": "6b6a6f503b45bdcc",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/mesh/allnodes",
        "info": "",
        "x": 3870,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3969509f96c4c2e2",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/mesh/nodes",
        "info": "",
        "x": 3630,
        "y": 2220,
        "wires": []
    },
    {
        "id": "0803cd41a205f6c6",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in: res/mesh/nodes",
        "info": "",
        "x": 3900,
        "y": 2220,
        "wires": []
    },
    {
        "id": "4df0d1b57b542f89",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : esp/pong",
        "info": "",
        "x": 3850,
        "y": 920,
        "wires": []
    },
    {
        "id": "1970761db557fbbe",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Pong",
        "func": "msg.type = \"PONG\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 960,
        "wires": [
            [
                "64eb90cd555368fa"
            ]
        ]
    },
    {
        "id": "506f1bbb90db3b8d",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/state/update",
        "info": "",
        "x": 3630,
        "y": 1180,
        "wires": []
    },
    {
        "id": "aa139270c9c9129b",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Relay Control",
        "func": "if (msg.type == \"RELAY_CONTROL\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 1220,
        "wires": [
            [
                "894dde741aafd1b0"
            ]
        ]
    },
    {
        "id": "841726384f5eb118",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/mesh/unpair",
        "info": "",
        "x": 3610,
        "y": 2080,
        "wires": []
    },
    {
        "id": "31ebd765b7e5dac5",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Unpair Node Req",
        "func": "if (msg.type == \"UNPAIR_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2040,
        "wires": [
            [
                "f39f4fbc890d7f9b"
            ]
        ]
    },
    {
        "id": "94d37068fd51963f",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/mesh/unpair",
        "info": "",
        "x": 3870,
        "y": 2080,
        "wires": []
    },
    {
        "id": "59b117c226f7f408",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Unpair Node Res",
        "func": "msg.type = \"UNPAIR_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 2040,
        "wires": [
            [
                "d8db7adf251ab49a"
            ]
        ]
    },
    {
        "id": "77c0f3b212e875b6",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : esp/pong",
        "info": "",
        "x": 2590,
        "y": 2160,
        "wires": []
    },
    {
        "id": "95d133c2bd0b8178",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Update GPIO Type",
        "func": "if (msg.type == \"UPDATE_GPIO_CONFIG\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3410,
        "y": 1920,
        "wires": [
            [
                "44379ef65d5ec6fd"
            ]
        ]
    },
    {
        "id": "89281b5c9a2e6216",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Update GPIO Type",
        "func": "msg.type = \"UPDATE_GPIO_CONFIG\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 1920,
        "wires": [
            [
                "973c747b26b38f5d"
            ]
        ]
    },
    {
        "id": "15a6e199b2ce4076",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/mode/update",
        "info": "",
        "x": 3630,
        "y": 1960,
        "wires": []
    },
    {
        "id": "8fd6b258fc0c9a30",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/mode/update",
        "info": "",
        "x": 3870,
        "y": 1960,
        "wires": []
    },
    {
        "id": "8efaab24836f4995",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Config Relay",
        "func": "if (msg.type == \"RELAY_CONFIG\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3450,
        "y": 1340,
        "wires": [
            [
                "8125d1ed3a355caf"
            ]
        ]
    },
    {
        "id": "fc012c23e6a42326",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Config Relay",
        "func": "msg.type = \"RELAY_CONFIG\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4070,
        "y": 1340,
        "wires": [
            [
                "16d7e49a69e888cb"
            ]
        ]
    },
    {
        "id": "20709561f390f90a",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/config/set",
        "info": "",
        "x": 3640,
        "y": 1300,
        "wires": []
    },
    {
        "id": "a78b21698e496f6f",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/config/set",
        "info": "",
        "x": 3860,
        "y": 1300,
        "wires": []
    },
    {
        "id": "bbd559d37325397d",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Get Config",
        "func": "if (msg.type == \"GET_RELAY_CONFIG\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 1760,
        "wires": [
            [
                "9190134ab001943a"
            ]
        ]
    },
    {
        "id": "0c36258cd2768e80",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Get Config",
        "func": "msg.type = \"GET_RELAY_CONFIG\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1760,
        "wires": [
            [
                "c536ca02256864d0"
            ]
        ]
    },
    {
        "id": "992d73c5da492b6d",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/config/remove",
        "info": "",
        "x": 3620,
        "y": 1660,
        "wires": []
    },
    {
        "id": "79aec41c53c102fb",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/config/remove",
        "info": "",
        "x": 3870,
        "y": 1660,
        "wires": []
    },
    {
        "id": "11ebebe7efa717dc",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Remove Config",
        "func": "if (msg.type == \"REMOVE_CONFIG\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3420,
        "y": 1620,
        "wires": [
            [
                "3e35a304ef15d24a"
            ]
        ]
    },
    {
        "id": "f6a693728f3c32bf",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Remove Config",
        "func": "msg.type = \"REMOVE_CONFIG\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4080,
        "y": 1620,
        "wires": [
            [
                "77cbdbec65566dab"
            ]
        ]
    },
    {
        "id": "e828b4b029a38c12",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt out : req/config/get",
        "info": "",
        "x": 3640,
        "y": 1800,
        "wires": []
    },
    {
        "id": "685aa1961e20b624",
        "type": "comment",
        "z": "9babbc837fd78c64",
        "name": "mqtt in : res/config/get",
        "info": "",
        "x": 3860,
        "y": 1800,
        "wires": []
    },
    {
        "id": "82cfffadc89d24cd",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "esp/ping",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 2520,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f5c5b820dc36dda9",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "esp/pong",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3820,
        "y": 960,
        "wires": [
            [
                "1970761db557fbbe"
            ]
        ]
    },
    {
        "id": "136ebb98c89c58b7",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mesh/allnodes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3650,
        "y": 1100,
        "wires": []
    },
    {
        "id": "201ca9e6e91e89bb",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mesh/allnodes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3850,
        "y": 1100,
        "wires": [
            [
                "e696f281a8719a4b"
            ]
        ]
    },
    {
        "id": "894dde741aafd1b0",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/state/update",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3660,
        "y": 1220,
        "wires": []
    },
    {
        "id": "8125d1ed3a355caf",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/config/set",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3660,
        "y": 1340,
        "wires": []
    },
    {
        "id": "dc494fd8a8bc2f68",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/config/set",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3830,
        "y": 1340,
        "wires": [
            [
                "fc012c23e6a42326"
            ]
        ]
    },
    {
        "id": "3e35a304ef15d24a",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/config/remove",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3650,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a8621068fcc92283",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/config/remove",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3850,
        "y": 1620,
        "wires": [
            [
                "f6a693728f3c32bf"
            ]
        ]
    },
    {
        "id": "9190134ab001943a",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/config/get",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3660,
        "y": 1760,
        "wires": []
    },
    {
        "id": "8b4e42ea796f9cb8",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/config/get",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3830,
        "y": 1760,
        "wires": [
            [
                "0c36258cd2768e80"
            ]
        ]
    },
    {
        "id": "44379ef65d5ec6fd",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mode/update",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3650,
        "y": 1920,
        "wires": []
    },
    {
        "id": "02975b3acf37ba84",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mode/update",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3840,
        "y": 1920,
        "wires": [
            [
                "89281b5c9a2e6216"
            ]
        ]
    },
    {
        "id": "f39f4fbc890d7f9b",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mesh/unpair",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3660,
        "y": 2040,
        "wires": []
    },
    {
        "id": "b5db95db2995335a",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mesh/unpair",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3840,
        "y": 2040,
        "wires": [
            [
                "59b117c226f7f408"
            ]
        ]
    },
    {
        "id": "1393b8618adddcbc",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mesh/nodes",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3660,
        "y": 2180,
        "wires": []
    },
    {
        "id": "d29e79fe8a47bcaf",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mesh/nodes",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3840,
        "y": 2180,
        "wires": [
            [
                "f766010993eee160"
            ]
        ]
    },
    {
        "id": "99d2c3a8e472e669",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "esp/pong",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2560,
        "y": 2200,
        "wires": [
            [
                "e6ca1c4aa1eb06af"
            ]
        ]
    },
    {
        "id": "dff42db80c101845",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mesh/scan",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 2380,
        "y": 2400,
        "wires": []
    },
    {
        "id": "9df4a9b55e25e5c8",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mesh/scan",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2580,
        "y": 2400,
        "wires": [
            [
                "a3355d03b67eb5c9"
            ]
        ]
    },
    {
        "id": "bb2b9ef0429381ce",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mesh/pair",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 2380,
        "y": 2560,
        "wires": []
    },
    {
        "id": "87ac3aa2ba7cc9ce",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mesh/pair",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2570,
        "y": 2560,
        "wires": [
            [
                "6d2b6ff6bc6e66e8"
            ]
        ]
    },
    {
        "id": "5e9f0a65f2212e7c",
        "type": "mongodb3 in",
        "z": "9babbc837fd78c64",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 3200,
        "y": 2580,
        "wires": [
            [
                "4437803104982b56"
            ]
        ]
    },
    {
        "id": "8833dedb1da9ed3e",
        "type": "mongodb3 in",
        "z": "9babbc837fd78c64",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 3780,
        "y": 2440,
        "wires": [
            [
                "2a047d38fe7938a8"
            ]
        ]
    },
    {
        "id": "612854fbcf2f857f",
        "type": "mongodb3 in",
        "z": "9babbc837fd78c64",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 2400,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "d26c94cf362561d9",
        "type": "debug",
        "z": "9babbc837fd78c64",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 3640,
        "y": 2140,
        "wires": []
    },
    {
        "id": "fa0fb79478df942f",
        "type": "debug",
        "z": "9babbc837fd78c64",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "type",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 4820,
        "y": 1500,
        "wires": []
    },
    {
        "id": "217ac05c91f094de",
        "type": "inject",
        "z": "9babbc837fd78c64",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ping",
        "payloadType": "str",
        "x": 2270,
        "y": 1540,
        "wires": [
            [
                "82cfffadc89d24cd"
            ]
        ]
    },
    {
        "id": "3d3ae649927c1dca",
        "type": "mqtt in",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "res/mode/get",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc4d597ebc76b350",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 3830,
        "y": 1560,
        "wires": [
            [
                "d05334b79d89a0c1"
            ]
        ]
    },
    {
        "id": "6e6812a4d22a3e21",
        "type": "mqtt out",
        "z": "9babbc837fd78c64",
        "name": "",
        "topic": "req/mode/get",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc4d597ebc76b350",
        "x": 3670,
        "y": 1560,
        "wires": []
    },
    {
        "id": "1db9018e215d7237",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Get Config",
        "func": "if (msg.type == \"REMOVE_CONFIG\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3400,
        "y": 1560,
        "wires": [
            [
                "6e6812a4d22a3e21"
            ]
        ]
    },
    {
        "id": "d05334b79d89a0c1",
        "type": "function",
        "z": "9babbc837fd78c64",
        "name": "Filter Get Config",
        "func": "msg.type = \"GET_GPIO_CONFIG\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1560,
        "wires": [
            [
                "77cbdbec65566dab"
            ]
        ]
    },
    {
        "id": "5c304d9f1487ad87",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 1920,
        "y": 2360,
        "wires": [
            [
                "bbbb36b2f908c975",
                "6ee7ca11700d861b"
            ]
        ]
    },
    {
        "id": "4066cb50b029f0c6",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 3020,
        "y": 2280,
        "wires": [
            [
                "cbaeeb25378a09c6"
            ]
        ]
    },
    {
        "id": "bbbb36b2f908c975",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2000,
        "y": 2400,
        "wires": [
            [
                "b082c695eeedb24a",
                "24a52b974892c75f"
            ]
        ]
    },
    {
        "id": "7e8474d7a8468b7f",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2960,
        "y": 2400,
        "wires": [
            [
                "4066cb50b029f0c6"
            ]
        ]
    },
    {
        "id": "9fde819940e1b3d9",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2900,
        "y": 2560,
        "wires": [
            [
                "7e8474d7a8468b7f"
            ]
        ]
    },
    {
        "id": "6ee7ca11700d861b",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2000,
        "y": 2200,
        "wires": [
            [
                "537555a50dc11621"
            ]
        ]
    },
    {
        "id": "1fef39c64102d6cc",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2780,
        "y": 1520,
        "wires": [
            [
                "0a7b6cbf7b461970",
                "16ca1e9e665b828b"
            ]
        ]
    },
    {
        "id": "b80536736c906bfe",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4680,
        "y": 1440,
        "wires": [
            [
                "fa0fb79478df942f",
                "c31b291f58377439"
            ]
        ]
    },
    {
        "id": "a25fedaad9224730",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 3280,
        "y": 2320,
        "wires": [
            [
                "4cbf378203bdf174"
            ]
        ]
    },
    {
        "id": "52d3ab4215a54733",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4240,
        "y": 2320,
        "wires": [
            [
                "d86286d67bc9b05d"
            ]
        ]
    },
    {
        "id": "d3e6b12467914fe6",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2660,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "d0d96a720556fd7f",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 3020,
        "y": 1100,
        "wires": [
            [
                "ac44ab6bb9b672d1"
            ]
        ]
    },
    {
        "id": "01fb56548317f1d6",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 3200,
        "y": 2180,
        "wires": [
            [
                "a25fedaad9224730",
                "08a643a12e45ea8d"
            ]
        ]
    },
    {
        "id": "ba68d91397db322e",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4500,
        "y": 1100,
        "wires": [
            [
                "16d7e49a69e888cb"
            ]
        ]
    },
    {
        "id": "d86286d67bc9b05d",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4320,
        "y": 2180,
        "wires": [
            [
                "d8db7adf251ab49a"
            ]
        ]
    },
    {
        "id": "64eb90cd555368fa",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4420,
        "y": 960,
        "wires": [
            [
                "ba68d91397db322e"
            ]
        ]
    },
    {
        "id": "9096d4205b7de256",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2940,
        "y": 1220,
        "wires": [
            [
                "d0d96a720556fd7f",
                "aa139270c9c9129b"
            ]
        ]
    },
    {
        "id": "268f7a791023eab0",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 3120,
        "y": 2040,
        "wires": [
            [
                "01fb56548317f1d6",
                "31ebd765b7e5dac5"
            ]
        ]
    },
    {
        "id": "d8db7adf251ab49a",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4400,
        "y": 2040,
        "wires": [
            [
                "973c747b26b38f5d"
            ]
        ]
    },
    {
        "id": "973c747b26b38f5d",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4480,
        "y": 1920,
        "wires": [
            [
                "c536ca02256864d0"
            ]
        ]
    },
    {
        "id": "538e75b6b8fae931",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 3040,
        "y": 1920,
        "wires": [
            [
                "268f7a791023eab0",
                "95d133c2bd0b8178"
            ]
        ]
    },
    {
        "id": "0a7b6cbf7b461970",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2860,
        "y": 1340,
        "wires": [
            [
                "9096d4205b7de256",
                "8efaab24836f4995"
            ]
        ]
    },
    {
        "id": "16d7e49a69e888cb",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4580,
        "y": 1340,
        "wires": [
            [
                "b80536736c906bfe"
            ]
        ]
    },
    {
        "id": "16ca1e9e665b828b",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2860,
        "y": 1620,
        "wires": [
            [
                "3d1d149ebfd8fe94",
                "11ebebe7efa717dc",
                "1db9018e215d7237"
            ]
        ]
    },
    {
        "id": "77cbdbec65566dab",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4600,
        "y": 1620,
        "wires": [
            [
                "b80536736c906bfe"
            ]
        ]
    },
    {
        "id": "3d1d149ebfd8fe94",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 2960,
        "y": 1760,
        "wires": [
            [
                "538e75b6b8fae931",
                "bbd559d37325397d"
            ]
        ]
    },
    {
        "id": "c536ca02256864d0",
        "type": "junction",
        "z": "9babbc837fd78c64",
        "x": 4560,
        "y": 1760,
        "wires": [
            [
                "77cbdbec65566dab"
            ]
        ]
    },
    {
        "id": "2f692e7cb40097ed",
        "type": "ui-group",
        "name": "Login Group",
        "page": "f721a59bf36641c2",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": false,
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8146a75c4508b858",
        "type": "ui-group",
        "name": "Scan Group",
        "page": "b5fbde398eca86ab",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "dd337cb0663d76c3",
        "type": "ui-group",
        "name": "Home",
        "page": "b820a1f0025766bd",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "cc4d597ebc76b350",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.122",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "013c016d2aaac063",
        "type": "mongodb3",
        "uri": "mongodb+srv://tuwaris:5D4Wyu40hIK64EFh@tuwaris.5ynbx.mongodb.net/smart_home?retryWrites=true&w=majority&appName=Tuwaris",
        "name": "smart_home",
        "options": "{ “useNewUrlParser”: true}",
        "parallelism": -1
    },
    {
        "id": "f721a59bf36641c2",
        "type": "ui-page",
        "name": "Login",
        "ui": "9c6816c5eb8f8852",
        "path": "/login",
        "icon": "login",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b5fbde398eca86ab",
        "type": "ui-page",
        "name": "Scan",
        "ui": "9c6816c5eb8f8852",
        "path": "/scan",
        "icon": "wifi",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b820a1f0025766bd",
        "type": "ui-page",
        "name": "Home",
        "ui": "9c6816c5eb8f8852",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6816c5eb8f8852",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "6ba0f05d9b3e74ec",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#a2af9b",
            "primary": "#dccfc0",
            "bgPage": "#faf9ee",
            "groupBg": "#eeeeee",
            "groupOutline": "#e3e3e3"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "34c8c29b86db41b9",
        "type": "global-config",
        "env": [],
        "modules": {
            "@flowfuse/node-red-dashboard": "1.27.2",
            "node-red-contrib-mongodb3": "2.0.1"
        }
    }
]