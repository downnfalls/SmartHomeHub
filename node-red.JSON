[
    {
        "id": "2c682173eb064de0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d73b1b5c177d13a",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "4472b5190b4b72f8",
                "65f08f8689f4b1ee"
            ]
        ]
    },
    {
        "id": "567f64296f314b8a",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "f3bda6c28c4cdefd"
            ]
        ]
    },
    {
        "id": "ca478c1c869a4381",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "567f64296f314b8a"
            ]
        ]
    },
    {
        "id": "2662d247e5832ef4",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "35c058ec66022a16"
            ]
        ]
    },
    {
        "id": "4472b5190b4b72f8",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 260,
        "y": 720,
        "wires": [
            [
                "628aaeee6693ac2b",
                "b0e27f5ab60e12fd"
            ]
        ]
    },
    {
        "id": "b0e27f5ab60e12fd",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 340,
        "y": 960,
        "wires": [
            [
                "dadc1fd165490ce2"
            ]
        ]
    },
    {
        "id": "990288c0b07710ec",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "567f64296f314b8a"
            ]
        ]
    },
    {
        "id": "8c89bbddc8ff1946",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1120,
        "y": 1160,
        "wires": [
            [
                "990288c0b07710ec"
            ]
        ]
    },
    {
        "id": "dadc1fd165490ce2",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 420,
        "y": 1160,
        "wires": [
            [
                "cb049ac75fb69645"
            ]
        ]
    },
    {
        "id": "65f08f8689f4b1ee",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "2662d247e5832ef4",
                "db79adae9b08456e"
            ]
        ]
    },
    {
        "id": "e0e44357057ba5c3",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 160,
        "y": 2340,
        "wires": [
            [
                "ae7c5b3d7e4a5795",
                "2350652fbadaae99"
            ]
        ]
    },
    {
        "id": "f4a13cbca9ec8ca7",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1300,
        "y": 2260,
        "wires": [
            [
                "81d74a33ea5da797"
            ]
        ]
    },
    {
        "id": "34af37b65b55eacf",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 380,
        "y": 2700,
        "wires": [
            [
                "859b3bd66bc892ae"
            ]
        ]
    },
    {
        "id": "c02fc4796c3e4414",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1080,
        "y": 2700,
        "wires": [
            [
                "b9bb8e0b80aefb9d"
            ]
        ]
    },
    {
        "id": "df7a3faee1583cba",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 420,
        "y": 1920,
        "wires": [
            [
                "fdce47c8830e0420"
            ]
        ]
    },
    {
        "id": "dc3ea815b143fda4",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 880,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f7f4e351ed6248e3",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 320,
        "y": 2060,
        "wires": [
            [
                "df7a3faee1583cba",
                "07d88fd0251f9976"
            ]
        ]
    },
    {
        "id": "c14b30fed8c2b15d",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 320,
        "y": 2560,
        "wires": [
            [
                "34af37b65b55eacf",
                "14b63b61051ac714"
            ]
        ]
    },
    {
        "id": "fd7426e6c315f693",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1220,
        "y": 2060,
        "wires": [
            [
                "f4a13cbca9ec8ca7"
            ]
        ]
    },
    {
        "id": "b9bb8e0b80aefb9d",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1140,
        "y": 2560,
        "wires": [
            [
                "9a1992c72110a3a2"
            ]
        ]
    },
    {
        "id": "12e519c8df58a2c6",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1120,
        "y": 1920,
        "wires": [
            [
                "fd7426e6c315f693"
            ]
        ]
    },
    {
        "id": "ae7c5b3d7e4a5795",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 240,
        "y": 2180,
        "wires": [
            [
                "f7f4e351ed6248e3",
                "d2410c09cb80c845"
            ]
        ]
    },
    {
        "id": "2350652fbadaae99",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 240,
        "y": 2420,
        "wires": [
            [
                "c14b30fed8c2b15d",
                "139f4630319af6dc"
            ]
        ]
    },
    {
        "id": "9a1992c72110a3a2",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1220,
        "y": 2420,
        "wires": [
            [
                "f4a13cbca9ec8ca7"
            ]
        ]
    },
    {
        "id": "849cc3e8cfb02cf5",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Scan Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"result\": [\n            {\n                \"mac_address\": \"0C:AD:ER:BE:HU:15\",\n                \"display_name\": \"MeshNode\"\n            },\n            {\n                \"mac_address\": \"10:B5:1B:15:1E:AA\",\n                \"display_name\": \"MeshNode\"\n            }\n        ]\n    };\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 860,
        "wires": [
            [
                "3c898bbf7c3df719"
            ]
        ]
    },
    {
        "id": "fc0f8e7f1e5619e8",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "e98548860d5087b6",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "50d414316f279371",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "70b03f26254364a2"
            ]
        ]
    },
    {
        "id": "35c058ec66022a16",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Ping",
        "func": "if (msg.payload == \"ping\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "50d414316f279371"
            ]
        ]
    },
    {
        "id": "718f735a79ab1db4",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/scan",
        "info": "",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "1e28c023bd1c9431",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out  : res/mesh/scan",
        "info": "",
        "x": 850,
        "y": 820,
        "wires": []
    },
    {
        "id": "628aaeee6693ac2b",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Scan Req",
        "func": "if (msg.payload == \"scan\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "849cc3e8cfb02cf5"
            ]
        ]
    },
    {
        "id": "70b03f26254364a2",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pong",
        "func": "msg.scan = false;\nmsg.pong = true;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "ca478c1c869a4381"
            ]
        ]
    },
    {
        "id": "3c898bbf7c3df719",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Scan Res",
        "func": "msg.scan = true;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "990288c0b07710ec"
            ]
        ]
    },
    {
        "id": "1e07b4314edd585b",
        "type": "debug",
        "z": "2c682173eb064de0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 160,
        "wires": []
    },
    {
        "id": "a3bcb49fdd374e06",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Pairing",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"mac_address\":\"0C:AD:ER:BE:HU:15\", \n        \"info\":\"pairing to new node.\"\n    };\n\n    // Error condition\n    // msg.payload = {\n    //     \"mac_address\":\"0C:AD:ER:BE:HU:15\",\n    //     \"info\":\"failed to connect to node.\"\n    // };\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "e3794c8ee1dd02c6"
            ]
        ]
    },
    {
        "id": "e3794c8ee1dd02c6",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pair Res",
        "func": "msg.scan = false;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1160,
        "wires": [
            [
                "8c89bbddc8ff1946"
            ]
        ]
    },
    {
        "id": "cb049ac75fb69645",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pair Req",
        "func": "if (msg.pair == \"true\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "a3bcb49fdd374e06"
            ]
        ]
    },
    {
        "id": "c24cce32ce2b54b3",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/pair",
        "info": "",
        "x": 630,
        "y": 1260,
        "wires": []
    },
    {
        "id": "67fae7c955747ddb",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : res/mesh/pair",
        "info": "",
        "x": 860,
        "y": 1260,
        "wires": []
    },
    {
        "id": "6026d2b7bbeec104",
        "type": "inject",
        "z": "2c682173eb064de0",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ping",
        "payloadType": "str",
        "x": 310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b17e40686d04010d",
        "type": "ui-template",
        "z": "2c682173eb064de0",
        "group": "2f692e7cb40097ed",
        "page": "",
        "ui": "",
        "name": "Login Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template class=\"bg-black-100\">\n  <div class=\"flex flex-col items-center justify-center h-full p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Login</h2>\n    <v-text-field v-model=\"username\" label=\"Username\" outlined></v-text-field>\n    <v-text-field v-model=\"password\" label=\"Password\" type=\"password\" outlined></v-text-field>\n    <p v-if=\"error\" class=\"text-red-500 mt-2\">{{ error }}</p>\n    <v-btn class=\"mt-4\" color=\"primary\" @click=\"login\">Login</v-btn>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n  },\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\")) {\n      this.redirectScan();\n    }\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg && newMsg.payload) {\n        const user = newMsg.payload;\n        if (this.username === user.username && this.password === user.password) {\n          this.error = \"\";\n          localStorage.setItem(\"loggedIn\", \"true\");\n          this.redirectScan();\n        } else {\n          this.error = \"Invalid username or password\";\n        }\n      }\n    }\n  },\n  methods: {\n    login() {\n      const sendObj = {\n        collection: \"users\",\n        payload: { username: this.username },\n        operation: \"findOne\"\n      };\n      this.send(sendObj);\n    },\n    redirectScan() {\n      // tell Node-RED to switch tab via ui-control\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/scan`;\n    }\n  }\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 1420,
        "wires": [
            [
                "414b2c245a73e2f4"
            ]
        ]
    },
    {
        "id": "f3bda6c28c4cdefd",
        "type": "ui-template",
        "z": "2c682173eb064de0",
        "group": "8146a75c4508b858",
        "page": "",
        "ui": "",
        "name": "Scan Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n  <div class=\"mesh-detail\">\n    <!-- Top action buttons: one left, one right -->\n    <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n      <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n          status : \n          <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n            {{ master_status }}\n          </span>\n        </strong>\n      <div>\n        <v-btn outlined @click=\"scanNodes\" style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\">\n          SCAN\n        </v-btn>\n\n        <v-btn color=\"red-darken-1\" outlined @click=\"deleteAllNodes\" class=\"font-weight-bold text-subtitle-1\">\n          RESET !\n        </v-btn>\n      </div>\n    </div>\n\n    <!-- Nodes displayed inline (only mesh_slave: false) -->\n    <div class=\"nodes-container pa-4 rounded-lg\" style=\"background-color: #a2af9b;\">\n      <div v-for=\"(node, index) in nodes_detected.filter(n => !n.mesh_slave)\" :key=\"index\" class=\"node-item\">\n        <!-- Dialog wrapping node button -->\n        <v-dialog v-model=\"node.active\" transition=\"dialog-bottom-transition\" class=\"w-auto\" style=\"max-width: 400px;\">\n          <template v-slot:activator=\"{ props: activatorProps }\">\n            <v-btn v-bind=\"activatorProps\" class=\"pt-2 pb-2\" color=\"primary\" outlined>\n              <div class=\"d-lg-flex d-xs-block\">\n                <div class=\"mr-lg-4\">\n                  Node Name: {{ node.display_name }}\n                  <br /><br />\n                MAC Addr: {{ node.mac_address }}\n                </div>\n                <!-- Delete button stays on card -->\n                <v-btn color=\"red-darken-1\" small class=\"\" @click.stop=\"deleteNode(index)\">\n                  Delete\n                </v-btn>\n              </div>\n            </v-btn>\n          </template>\n\n          <!-- Popup content -->\n          <v-card>\n            <v-toolbar title=\"New Slave\" style=\"background-color: #a2af9b;\"></v-toolbar>\n\n            <v-card-text>\n              <p class=\"mb-2\"><strong>Node Name:</strong> {{ node.display_name }}</p>\n              <p class=\"mb-2\"><strong>MAC Address:</strong> {{ node.mac_address }}</p>\n              <p>\n                <strong>Description:</strong>\n                <v-text-field v-model=\"description\" label=\"Description\" outlined class=\"mt-2\"></v-text-field>\n              </p>\n            </v-card-text>\n\n            <v-card-actions class=\"justify-space-between\">\n              <v-btn style=\"background-color: #a2af9b; color: black\" :loading=\"isLoading\" :disabled=\"isLoading\"\n                @click=\"addSlave(node)\">\n                <template v-slot:loader>\n                  <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n                </template>\n                <span v-if=\"!isLoading\">Pair</span>\n                <span v-else>Loading...</span>\n              </v-btn>\n\n              <v-btn @click=\"cancelAddSlave(node)\" style=\"background-color: #90a4ae; color: black\">\n                Cancel\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </div>\n    </div>\n  </div>\n  <!-- Top notification -->\n  <v-snackbar v-model=\"snackbar\" top absolute :timeout=\"notify_timeout\" :color=\"notify_color\" elevation=\"5\">\n    {{ message }}\n    <template v-slot:actions>\n      <v-btn text @click=\"snackbar = false\">Close</v-btn>\n    </template>\n  </v-snackbar>\n</template>\n\n<script>\n  export default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      nodes_detected: [],\n      description: \"\",\n      pair_display_name: \"\",\n      pair_mac_addr: \"\",\n      master_status: \"offline\",\n      ping_delay: 0,\n      ping_request: false, // filter msg ping\n      scan_request: false, // filter msg scan\n      pair_request: false, // filter msg pair\n      isLoading: false,\n      snackbar: false, // control notify visibility\n      message: '', // message of notify\n      notify_color: \"teal\",\n      notify_timeout: 0\n    };\n  },\n  mounted() {\n    // invoke logic function\n    this.checkStatus();\n    this.scanNodes();\n\n    // Load saved nodes from localStorage\n    const savedNodes = localStorage.getItem(\"nodes_detected\");\n    if (savedNodes) {\n      try {\n        this.nodes_detected = JSON.parse(savedNodes).map(n => ({\n          ...n,\n          active: false, // ensure active property exists\n        }));\n      } catch (e) {\n        console.error(\"Failed to parse nodes_detected from localStorage\", e);\n      }\n    }\n\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n      this.redirectLogin();\n    }\n\n    // Load data from localStorage\n\n    const description = localStorage.getItem(\"description\");\n    const pair_display_name = localStorage.getItem(\"pair_display_name\");\n    const pair_mac_addr = localStorage.getItem(\"pair_mac_addr\");\n    const isLoading = localStorage.getItem(\"isLoading\");\n\n    if (description && description != \"\") {\n        this.description = description;\n    }\n\n    if (pair_display_name && pair_display_name != \"\") {\n      this.pair_display_name = pair_display_name;\n    }\n\n    if (pair_mac_addr && pair_mac_addr != \"\") {\n      this.pair_mac_addr = pair_mac_addr;\n    }\n    if (isLoading == \"true\") {\n      this.isLoading = true;\n    } else {\n      this.isLoading = false;\n    }\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        // node scan res handler\n        if (newMsg && newMsg.scan && this.scan_request) {\n          const payload = { ...newMsg.payload };\n          payload.result.forEach(item => {\n            const node = { \n              ...item, \n              mesh_slave: false, \n              active: false \n            };\n\n            const exists = this.nodes_detected.some(\n              n => n.mac_address === node.mac_address && n.display_name === node.display_name\n            );\n\n            if (!exists) {\n              this.nodes_detected.push(node);\n              console.log(\"New node detected:\", node);\n            }\n          });\n          this.scan_request = false; \n        }\n\n        // pong handler\n        if (newMsg && newMsg.pong && this.ping_request) {\n          this.master_status = \"online\"\n          if (this.ping_delay < 2) {\n            this.ping_delay += 2;\n          }\n          this.ping_request = false; \n        }\n\n        // pair handler and if have pair successed it will auto allow\n        if (newMsg && newMsg.pair && (this.pair_request || newMsg.payload.mac_address == this.pair_mac_addr)) {\n          this.pair_request = false;\n\n          // check pair status\n          switch (newMsg.payload.info) {\n            case \"pairing to new node.\":\n              // change to loading state\n              this.isLoading = true;\n\n              // Save to localStorage\n              localStorage.setItem(\"description\", this.description);\n              localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n              localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n              localStorage.setItem(\"isLoading\", this.isLoading);\n\n              console.log(\"Info : Wait for pairing..\");\n              this.showNotification(\"Info : Wait for pairing..\", \"blue\");\n              \n              // wait for paired from esp32\n              break;\n            case \"failed to connect to node.\":\n              console.log(\"Error : Failed to connect to node!!\");\n              this.showNotification(\"Error : Failed to connect to node!!\", \"red\");\n              break;\n            case \"pair success!\":\n              console.log(\"Info : Pair succeed!!\");\n              this.showNotification(\"Info : Pair succeed!!\", \"green\");\n\n              // save to mongoDB database\n              const sendObj = {\n                collection: \"nodes\",\n                payload: { \n                  mac_address: newMsg.payload.mac_address,\n                  node_id: newMsg.payload.node_id,\n                  node_type: newMsg.payload.node_type,\n                  description: this.description\n                },\n                operation: \"insertOne\",\n                toMongo: true\n              };\n\n              this.send(sendObj);\n\n              // Set mesh_slave = true so it no longer appears in scan section\n              const targetNode = this.nodes_detected.find(\n                n => n.mac_address === this.pair_mac_addr && n.display_name === this.pair_display_name\n              );\n              if (targetNode) {\n                targetNode.mesh_slave = true;\n                localStorage.setItem(\"nodes_detected\", JSON.stringify(this.nodes_detected));\n              }\n              this.isLoading = false;\n              // reset pairing node info\n              this.description = \"\";\n              this.pair_display_name = \"\";\n              this.pair_mac_addr = \"\";\n\n              // Save to localStorage\n              localStorage.setItem(\"description\", this.description);\n              localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n              localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n              localStorage.setItem(\"isLoading\", this.isLoading);\n              break;\n            default:\n              console.log(\"Some error occurred!!\");\n              this.showNotification(\"Error : Some error occurred!!\", \"red\");\n          }\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    showNotification(msg = 'Notification shown at the top!', color = \"teal\") {\n      this.notify_timeout += 3000;\n      this.message = msg;\n      this.notify_color = color;\n      this.snackbar = true;\n      // Optional: send message to Node-RED backend\n      this.$emit('send', { payload: 'top_notification_shown' });\n    },\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    deleteNode(index) {\n      this.nodes_detected.splice(index, 1);\n      localStorage.setItem(\n        \"nodes_detected\",\n        JSON.stringify(this.nodes_detected)\n      );\n    },\n    deleteAllNodes() {\n      if (confirm(\"Are you sure you want to delete all nodes?\")) {\n        this.nodes_detected = [];\n        localStorage.removeItem(\"nodes_detected\");\n        const sendObj = {\n          collection: \"nodes\",\n          operation: \"drop\",\n          toMongo: true\n        };\n        this.send(sendObj);\n      }\n    },\n    addSlave(node) {\n      this.pair_display_name = node.display_name;\n      this.pair_mac_addr = node.mac_address;\n\n      // send pairing request\n      const sendObj = {\n        payload : node.mac_address,\n        pair : \"true\"\n      };\n      this.pair_request = true;\n      \n      // handle master offline\n      if (this.master_status == \"offline\") {\n        console.log(\"Error : Master is offline!!\");\n        this.showNotification(\"Error : Master is offline!!\", \"red\");\n        return;\n      }\n\n      if (this.isLoading) {\n        console.log(\"Warning : Cannot pair node while pairing!!\");\n        this.showNotification(\"Warning : Cannot pair node while pairing!!\", \"yellow\");\n        return;\n      }\n\n      this.send(sendObj);\n\n      // Send message to Node-RED backend\n      this.$emit('send', { payload: 'button_clicked' });\n    },\n    checkStatus() {\n      const sendObj = {\n        payload: \"ping\"\n      };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      // send ping payload to master node 5 sec interval\n      setInterval(() => {\n        this.ping_request = true; \n        // online & offline logic\n        if (this.ping_delay == 0) {\n          this.master_status = \"offline\";\n        } else {\n          this.master_status = \"online\";\n          this.ping_delay -= 1;\n        }\n        this.send(sendObj);\n      }, 5000); // 1000 ms = 1 second\n    },\n    scanNodes() {\n      const sendObj = {\n        payload: \"scan\"\n      };\n      this.scan_request = true; \n      this.send(sendObj);\n    },\n    cancelAddSlave(node) {\n      if (this.isLoading == false) {\n        // close dialog pop up\n        node.active = false;\n      } else {\n        if (confirm(\"Do you want to cancel ?\\n[ cancel after pairing you have to sync mesh ]\")) {\n          this.isLoading = false;\n          this.pair_display_name = \"\";\n          this.pair_mac_addr = \"\";\n          this.description = \"\";\n\n          // Save to localStorage\n          localStorage.setItem(\"description\", this.description);\n          localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n          localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n          localStorage.setItem(\"isLoading\", this.isLoading);\n\n          // close dialog pop up\n          node.active = false;\n        }\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n  .top-buttons {\n    margin: 10px;\n  }\n\n  .mesh-detail {\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n  }\n\n  .nodes-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n\n  .node-item {\n    display: inline-block;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 540,
        "wires": [
            [
                "4d73b1b5c177d13a"
            ]
        ]
    },
    {
        "id": "81d74a33ea5da797",
        "type": "ui-template",
        "z": "2c682173eb064de0",
        "group": "dd337cb0663d76c3",
        "page": "",
        "ui": "",
        "name": "Home Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n  <div style=\"display: flex; flex-direction: column;\" class=\"ma-3\">\n    <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n      <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n        status :\n        <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n          {{ master_status }}\n        </span>\n      </strong>\n      <div>\n        <v-btn\n          outlined\n          @click=\"refreshPage\"\n          style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n        >\n          REFRESH\n        </v-btn>\n        <v-btn\n          outlined\n          style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4\"\n          :loading=\"isLoading\"\n          :disabled=\"isLoading\"\n          @click=\"syncSlave\"\n        >\n          <template v-slot:loader>\n            <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n          </template>\n          <span v-if=\"!isLoading\">SYNC</span>\n          <span v-else>Loading...</span>\n        </v-btn>\n      </div>\n    </div>\n\n    <v-row class=\"mt-5 pa-4 rounded-lg\" style=\"background-color: #a2af9b; color: black\">\n      <v-col\n        v-for=\"(node, index) in slave_nodes\"\n        :key=\"index\"\n        cols=\"12\"\n        sm=\"3\"\n        md=\"3\"\n        color=\"primary\"\n      >\n        <v-sheet\n          class=\"pa-3 text-subtitle-1 text-blue-grey-darken-4 rounded-lg\"\n          color=\"primary\"\n          elevation=\"1\"\n        >\n          <v-sheet color=\"primary\">\n            <div class=\"d-flex justify-space-between align-center\">\n              <strong>STATUS :\n                <span :class=\"node.node_status === 'online' ? 'text-teal text-uppercase' : 'text-red-darken-2 text-uppercase'\">\n                  {{ node.node_status }}\n                </span>\n              </strong>\n\n              <div>\n                <v-btn\n                  icon=\"mdi-cog\"\n                  size=\"small\"\n                  variant=\"text\"\n                  @click.stop=\"showNodePopup(node)\"\n                ></v-btn>\n                <v-btn\n                  icon=\"mdi-delete\"\n                  size=\"small\"\n                  variant=\"text\"\n                  color=\"red-darken-2\"\n                  @click.stop=\"unpairNode(node)\"\n                ></v-btn>\n              </div>\n            </div>\n\n            <div class=\"d-flex align-center\">\n              <span class=\"mr-2\">Node Name :</span>\n              <span\n                v-if=\"editingNodeMac !== node.mac_address\"\n                @click.stop=\"startEditing(node)\"\n                style=\"cursor: pointer;\"\n                class=\"font-weight-bold\"\n              >\n                {{ node.name || 'Mesh Node' }}\n              </span>\n              <v-text-field\n                v-else\n                v-model=\"editingNodeName\"\n                @keyup.enter=\"saveNodeName\"\n                @blur=\"saveNodeName\"\n                @click.stop\n                dense\n                autofocus\n                single-line\n                hide-details\n              ></v-text-field>\n            </div>\n\n            <p>MAC Addr : {{ node.mac_address }}</p>\n            <p>Node Type : {{ node.node_type }}</p>\n            <p>Description : {{ node.description }}</p>\n\n            <div v-if=\"node.node_type === 'relay' && node.node_status === 'online'\">\n              <v-btn\n                class=\"mb-2 mt-2\"\n                block\n                color=\"blue-grey-darken-1\"\n                @click=\"setManualMode(node)\"\n              >\n                {{ this.toggle_mode }}\n              </v-btn>\n              <v-divider class=\"my-2\"></v-divider>\n              <div class=\"d-flex justify-space-around\">\n                <v-switch\n                  v-model=\"node.state.r1\"\n                  label=\"Relay 1\"\n                  color=\"teal\"\n                  inset\n                  hide-details\n                  :disabled=\"!node.manual_mode\"\n                  @change.stop=\"toggleRelay(node, 'r1')\"\n                ></v-switch>\n                <v-switch\n                  v-model=\"node.state.r2\"\n                  label=\"Relay 2\"\n                  color=\"teal\"\n                  inset\n                  hide-details\n                  :disabled=\"!node.manual_mode\"\n                  @change.stop=\"toggleRelay(node, 'r2')\"\n                ></v-switch>\n              </div>\n            </div>\n\n          </v-sheet>\n        </v-sheet>\n      </v-col>\n    </v-row>\n\n    <v-dialog v-model=\"dialog\" max-width=\"400\">\n      <v-card>\n        <v-card-text class=\"pa-5\">\n          <div v-if=\"selectedNode\" class=\"text-h6 text-center text-blue-grey-darken-4\">\n            {{ selectedNode.name || 'Mesh Node' }}\n          </div>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue-darken-1\" text @click=\"dialog = false\">\n            Close\n          </v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <!-- Top notification -->\n    <v-snackbar\n      v-model=\"snackbar\"\n      top\n      absolute\n      :timeout=\"notify_timeout\"\n      :color=\"notify_color\"\n      elevation=\"5\"\n    >\n      {{ message }}\n      <template v-slot:actions>\n        <v-btn text @click=\"snackbar = false\">Close</v-btn>\n      </template>\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n      this.redirectLogin();\n    }\n    this.getNodesMongoDB();\n    this.checkMasterStatus();\n    this.checkNodeStatus();\n  },\n  data() {\n    return {\n      slave_nodes: [],\n      getNode_request: false,\n      ping_request: false,\n      allNode_request: false,\n      activeNode_request: false,\n      unpair_request: false,\n      isLoading: false,\n      master_status: \"offline\",\n      editingNodeMac: null,\n      editingNodeName: \"\",\n      dialog: false,\n      selectedNode: null,\n      toggle_mode: \"MANUAL\",\n      snackbar: false, // control notify visibility\n      message: '', // message of notify\n      notify_color: \"teal\",\n      notify_timeout: 0\n    };\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg.type == \"MONGO_DB\" && this.getNode_request) {\n        this.isLoading = false;\n        this.slave_nodes = Object.values(newMsg.payload).map(node => ({\n          ...node,\n          node_status: \"offline\",\n          manual_mode: false // Initialize here\n        }));\n        this.getNode_request = false;\n      }\n\n      if (newMsg.type == \"PONG\" && this.ping_request) {\n        this.master_status = \"online\"\n        if (this.ping_delay < 2) {\n          this.ping_delay += 2;\n        }\n        this.ping_request = false;\n      }\n\n      if (newMsg.type == \"ACTIVE_NODE\" && this.activeNode_request) {\n        this.activeNode_request = false;\n        this.slave_nodes = this.slave_nodes.map(node => {\n          const key = node.mac_address;\n          if (newMsg.payload[key] && newMsg.payload[key].state) {\n            if (node.manual_mode == false) {\n              return {\n                ...node,\n                state: newMsg.payload[key]?.state || {},\n                node_status: \"online\"\n              };\n            } else {\n              return {\n                ...node,\n                node_status: \"online\"\n              };\n            }\n          } else {\n            return {\n              ...node,\n              node_status: \"offline\"\n            };\n          }\n        });\n      }\n\n      if (newMsg.type == \"ALL_NODE\" && this.allNode_request) {\n        this.allNode_request = false;\n        const dropObj = {\n          collection: \"nodes\",\n          payload: {},\n          operation: \"deleteMany\",\n          type: \"MONGO_DB\"\n        };\n        this.send(dropObj);\n        setTimeout(() => {\n          const insertObj = {\n            collection: \"nodes\",\n            payload: [Object.values(newMsg.payload)],\n            operation: \"insertMany\",\n            type: \"MONGO_DB\"\n          };\n          this.send(insertObj);\n          this.getNodesMongoDB();\n          // send notify\n          this.showNotification(`Sync successed`, \"green\");\n        }, 1500);\n      }\n      \n      if (newMsg.type == \"UNPAIR_NODE\" && this.unpair_request) {\n        // Send delete request to the database\n        const deleteObj = {\n          collection: \"nodes\",\n          operation: \"deleteOne\",\n          type: \"MONGO_DB\",\n          payload: [{ mac_address: newMsg.payload.mac_address }]\n        };\n        this.send(deleteObj);\n\n        // Immediately remove the node from the local array for UI update\n        this.slave_nodes = this.slave_nodes.filter(\n          (n) => n.mac_address !== newMsg.payload.mac_address\n        );\n\n        this.unpair_request = false;\n        // send notify\n        this.showNotification(`Unpair ${newMsg.payload.mac_address} successed`, \"green\");\n      }\n    }\n  },\n  methods: {\n    showNotification(msg = 'Notification shown at the top!', color = \"teal\") {\n      this.notify_timeout += 3000;\n      this.message = msg;\n      this.notify_color = color;\n      this.snackbar = true;\n      // Optional: send message to Node-RED backend\n      this.$emit('send', { payload: 'top_notification_shown' });\n    },\n    unpairNode(node) {\n      if (node.node_status == \"online\") {\n          if (confirm(`Are you sure you want to unpair the node \"${node.name || node.mac_address}\"?`)) {\n\n          // Send unpair to master mesh\n          const unpairObj = {\n            payload: node.node_id,\n            type: \"UNPAIR_NODE\",\n          }\n          this.send(unpairObj);\n          this.unpair_request = true;\n\n          // send notify\n          this.showNotification(\"Unpairing...\", \"blue\");\n        }\n      } else {\n        // send notify\n          this.showNotification(`This ${node.mac_address} is offline`, \"red\");\n      }\n    },\n\n    setManualMode(node) {\n      if (this.toggle_mode == \"MANUAL\") {\n        node.manual_mode = true;\n        this.toggle_mode = \"AUTO\"\n      } else {\n        node.manual_mode = false;\n        this.toggle_mode = \"MANUAL\"\n      }\n    },\n\n    toggleRelay(node, relayKey) {\n      if (!node || !node.state) {\n        console.error(\"Cannot toggle relay: Node or state is invalid.\", node);\n        return;\n      }\n      const newState = node.state[relayKey];\n      const commandObj = {\n        type: \"RELAY_CONTROL\",\n        payload: {\n          node_id: node.node_id,\n          state: {\n            \"r1\": node.state.r1,\n            \"r2\": node.state.r2,\n          },\n        }\n      };\n      console.log(\"Sending command:\", commandObj);\n      this.send(commandObj);\n    },\n\n    showNodePopup(node) {\n      this.selectedNode = node;\n      this.dialog = true;\n    },\n\n    startEditing(node) {\n      this.editingNodeMac = node.mac_address;\n      this.editingNodeName = node.name || '';\n    },\n\n    saveNodeName() {\n      if (!this.editingNodeMac) return;\n\n      const nodeToUpdate = this.slave_nodes.find(\n        (n) => n.mac_address === this.editingNodeMac\n      );\n\n      if (nodeToUpdate) {\n        nodeToUpdate.name = this.editingNodeName;\n\n        const updateObj = {\n          collection: \"nodes\",\n          operation: \"updateOne\",\n          type: \"MONGO_DB\",\n          payload: [\n            { mac_address: this.editingNodeMac },\n            { $set: { name: this.editingNodeName } }\n          ]\n        };\n\n        this.send(updateObj);\n      }\n\n      this.editingNodeMac = null;\n      this.editingNodeName = \"\";\n    },\n\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n\n    getNodesMongoDB() {\n      const sendObj = {\n        collection: \"nodes\",\n        operation: \"find.toArray\",\n        type: \"MONGO_DB\"\n      };\n      this.getNode_request = true;\n      this.send(sendObj);\n    },\n\n    checkMasterStatus() {\n      const sendObj = { payload: \"ping\", type: \"PING\" };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      setInterval(() => {\n        this.ping_request = true;\n        if (this.ping_delay == 0) {\n          this.master_status = \"offline\";\n        } else {\n          this.master_status = \"online\";\n          this.ping_delay -= 1;\n        }\n        this.send(sendObj);\n      }, 5000);\n    },\n\n    checkNodeStatus() {\n      const sendObj = { payload: \"active\", type: \"ACTIVE_NODE\" };\n      setInterval(() => {\n        if (this.master_status == \"online\") {\n          this.activeNode_request = true;\n          this.send(sendObj);\n        }\n      }, 1000);\n    },\n\n    syncSlave() {\n      this.allNode_request = true;\n      const sendObj = { payload: \"getAllNode\", type: \"ALL_NODE\" };\n      this.send(sendObj);\n      this.isLoading = true;\n    },\n\n    refreshPage() {\n      window.location.reload();\n    }\n  }\n};\n</script>\n\n<!--\n\n- config relay slave\n\n- config type of sensor (button, toggle, relay)\n\n- online offline filter function\n\n-->",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 2300,
        "wires": [
            [
                "e0e44357057ba5c3"
            ]
        ],
        "inputLabels": [
            "tyesty"
        ]
    },
    {
        "id": "414b2c245a73e2f4",
        "type": "mongodb3 in",
        "z": "2c682173eb064de0",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 720,
        "y": 1560,
        "wires": [
            [
                "b17e40686d04010d"
            ]
        ]
    },
    {
        "id": "60f63e5e64f49467",
        "type": "mongodb3 in",
        "z": "2c682173eb064de0",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 740,
        "y": 2820,
        "wires": [
            [
                "1e4b8208b3d66eb8"
            ]
        ]
    },
    {
        "id": "0b82205ee75a6ba7",
        "type": "inject",
        "z": "2c682173eb064de0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "pair",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0C:AD:ER:BE:HU:15\"",
        "payloadType": "str",
        "x": 320,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0bd63eacdc4dfc",
        "type": "inject",
        "z": "2c682173eb064de0",
        "name": "Pseudo Paired",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"mac_address\":\"0C:AD:ER:BE:HU:15\",\"node_id\":1950750929,\"node_type\":\"sensor\",\"info\":\"pair success!\"}",
        "payloadType": "json",
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "e3794c8ee1dd02c6"
            ]
        ]
    },
    {
        "id": "c68ea67af5dd77d5",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : res/mesh/pair",
        "info": "",
        "x": 610,
        "y": 960,
        "wires": []
    },
    {
        "id": "e103019d912b0671",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Active Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"A8:46:74:46:18:DC\": {\n            \"mac_address\": \"A8:46:74:46:18:DC\",\n            \"node_id\": 1950750941,\n            \"node_type\": \"relay\",\n            \"state\": {\n            \"r1\": true,\n            \"r2\": true\n            }\n        },\n        \"A8:46:74:46:18:D0\": {\n            \"mac_address\": \"A8:46:74:46:18:D0\",\n            \"node_id\": 1950750929,\n            \"node_type\": \"sensor\",\n            \"state\": {\n                \"gpio\" : {\n                    \"gpio_0\": false,\n                    \"gpio_1\": false,\n                    \"gpio_3\": false\n                },\n                \"i2c\" : {\n                    \"temperature\": 33.9,\n                    \"humidity\": 53.2,\n                    \"light\": 26.66667\n                }\n            }\n        }\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2560,
        "wires": [
            [
                "e05016ef1c99d9ab"
            ]
        ]
    },
    {
        "id": "14b63b61051ac714",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Active Node Req",
        "func": "if (msg.type == \"ACTIVE_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2560,
        "wires": [
            [
                "e103019d912b0671"
            ]
        ]
    },
    {
        "id": "e05016ef1c99d9ab",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Active Node Res",
        "func": "msg.type = \"ACTIVE_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2560,
        "wires": [
            [
                "b9bb8e0b80aefb9d"
            ]
        ]
    },
    {
        "id": "a5a7bd0418d69e9a",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo All Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"A8:46:74:46:18:DC\": {\n            \"mac_address\": \"A8:46:74:46:18:DC\",\n            \"node_id\": 1950750941,\n            \"node_type\": \"relay\"\n        },\n        \"A8:46:74:46:18:D0\": {\n            \"mac_address\": \"A8:46:74:46:18:D0\",\n            \"node_id\": 1950750929,\n            \"node_type\": \"sensor\"\n        }\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2060,
        "wires": [
            [
                "52d435fc7da18a62"
            ]
        ]
    },
    {
        "id": "07d88fd0251f9976",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter All Node Req",
        "func": "if (msg.type == \"ALL_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2060,
        "wires": [
            [
                "a5a7bd0418d69e9a"
            ]
        ]
    },
    {
        "id": "52d435fc7da18a62",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter All Node Res",
        "func": "msg.type = \"ALL_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2060,
        "wires": [
            [
                "fd7426e6c315f693"
            ]
        ]
    },
    {
        "id": "859b3bd66bc892ae",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Req Mongo",
        "func": "if (msg.type == \"MONGO_DB\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2700,
        "wires": [
            [
                "60f63e5e64f49467"
            ]
        ]
    },
    {
        "id": "1e4b8208b3d66eb8",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Res Mongo",
        "func": "if (!msg.payload.result) {\n    msg.type = \"MONGO_DB\";\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2700,
        "wires": [
            [
                "c02fc4796c3e4414"
            ]
        ]
    },
    {
        "id": "db79adae9b08456e",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Mongo",
        "func": "if (msg.toMongo){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "90f6a692f0f33d60"
            ]
        ]
    },
    {
        "id": "90f6a692f0f33d60",
        "type": "mongodb3 in",
        "z": "2c682173eb064de0",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 800,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "55a623171fc79f7d",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/allnodes",
        "info": "",
        "x": 570,
        "y": 2020,
        "wires": []
    },
    {
        "id": "d3363709dc27bd68",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : req/mesh/allnodes",
        "info": "",
        "x": 840,
        "y": 2020,
        "wires": []
    },
    {
        "id": "3529f7b1daa289a4",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/nodes",
        "info": "",
        "x": 590,
        "y": 2600,
        "wires": []
    },
    {
        "id": "62b7f6335b217409",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : req/mesh/nodes",
        "info": "",
        "x": 870,
        "y": 2600,
        "wires": []
    },
    {
        "id": "d19c169f0e8a8e3a",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 620,
        "y": 1740,
        "wires": []
    },
    {
        "id": "d05016c063f7ce6a",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 810,
        "y": 1740,
        "wires": []
    },
    {
        "id": "940767fa7b87149e",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1780,
        "wires": [
            [
                "a8ef2b924362df80"
            ]
        ]
    },
    {
        "id": "fdce47c8830e0420",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Ping",
        "func": "if (msg.type == \"PING\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1920,
        "wires": [
            [
                "940767fa7b87149e"
            ]
        ]
    },
    {
        "id": "a8ef2b924362df80",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pong",
        "func": "msg.type = \"PONG\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1920,
        "wires": [
            [
                "12e519c8df58a2c6"
            ]
        ]
    },
    {
        "id": "7edb7302290b1cde",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Relay Control",
        "func": "return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2180,
        "wires": [
            [
                "360c61bb6dc9d5a6"
            ]
        ]
    },
    {
        "id": "f8761ba5befd1d2f",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/state/update",
        "info": "",
        "x": 730,
        "y": 2140,
        "wires": []
    },
    {
        "id": "d2410c09cb80c845",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Relay Control",
        "func": "if (msg.type == \"RELAY_CONTROL\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2180,
        "wires": [
            [
                "7edb7302290b1cde"
            ]
        ]
    },
    {
        "id": "360c61bb6dc9d5a6",
        "type": "debug",
        "z": "2c682173eb064de0",
        "name": "Relay Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2180,
        "wires": []
    },
    {
        "id": "702e35ad5726d375",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/unpair",
        "info": "",
        "x": 610,
        "y": 2460,
        "wires": []
    },
    {
        "id": "42bca23738056e66",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Unpair Node",
        "func": "msg.payload = {\n  \"node_id\": 12345,\n  \"mac_address\": \"A8:46:74:46:18:DC\",\n  \"info\": \"unpairing\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2420,
        "wires": [
            [
                "f40a20bbd027a35c"
            ]
        ]
    },
    {
        "id": "139f4630319af6dc",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Unpair Node Req",
        "func": "if (msg.type == \"UNPAIR_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 2420,
        "wires": [
            [
                "42bca23738056e66"
            ]
        ]
    },
    {
        "id": "5f2ecbfb9a7e4650",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : req/mesh/unpair",
        "info": "",
        "x": 850,
        "y": 2460,
        "wires": []
    },
    {
        "id": "f40a20bbd027a35c",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Unpair Node Res",
        "func": "msg.type = \"UNPAIR_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 2420,
        "wires": [
            [
                "9a1992c72110a3a2"
            ]
        ]
    },
    {
        "id": "9495a6eaaea64898",
        "type": "ui_spacer",
        "z": "2c682173eb064de0",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "2f692e7cb40097ed",
        "type": "ui-group",
        "name": "Login Group",
        "page": "f721a59bf36641c2",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8146a75c4508b858",
        "type": "ui-group",
        "name": "Scan Group",
        "page": "b5fbde398eca86ab",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "dd337cb0663d76c3",
        "type": "ui-group",
        "name": "Home",
        "page": "b820a1f0025766bd",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "013c016d2aaac063",
        "type": "mongodb3",
        "uri": "mongodb+srv://tuwaris:5D4Wyu40hIK64EFh@tuwaris.5ynbx.mongodb.net/smart_home?retryWrites=true&w=majority&appName=Tuwaris",
        "name": "smart_home",
        "options": "{ “useNewUrlParser”: true}",
        "parallelism": -1
    },
    {
        "id": "f721a59bf36641c2",
        "type": "ui-page",
        "name": "Login",
        "ui": "9c6816c5eb8f8852",
        "path": "/login",
        "icon": "login",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b5fbde398eca86ab",
        "type": "ui-page",
        "name": "Scan",
        "ui": "9c6816c5eb8f8852",
        "path": "/scan",
        "icon": "wifi",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b820a1f0025766bd",
        "type": "ui-page",
        "name": "Home",
        "ui": "9c6816c5eb8f8852",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6816c5eb8f8852",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "6ba0f05d9b3e74ec",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#a2af9b",
            "primary": "#dccfc0",
            "bgPage": "#faf9ee",
            "groupBg": "#eeeeee",
            "groupOutline": "#e3e3e3"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a4e868922ef73cd2",
        "type": "global-config",
        "env": [],
        "modules": {
            "@flowfuse/node-red-dashboard": "1.27.2",
            "node-red-contrib-mongodb3": "2.0.1",
            "node-red-dashboard": "3.6.6"
        }
    }
]