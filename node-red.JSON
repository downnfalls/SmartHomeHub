[
    {
        "id": "2c682173eb064de0",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d73b1b5c177d13a",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "4472b5190b4b72f8",
                "65f08f8689f4b1ee"
            ]
        ]
    },
    {
        "id": "567f64296f314b8a",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "f3bda6c28c4cdefd"
            ]
        ]
    },
    {
        "id": "ca478c1c869a4381",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "567f64296f314b8a"
            ]
        ]
    },
    {
        "id": "2662d247e5832ef4",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "35c058ec66022a16"
            ]
        ]
    },
    {
        "id": "4472b5190b4b72f8",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 260,
        "y": 720,
        "wires": [
            [
                "628aaeee6693ac2b",
                "b0e27f5ab60e12fd"
            ]
        ]
    },
    {
        "id": "b0e27f5ab60e12fd",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 340,
        "y": 960,
        "wires": [
            [
                "dadc1fd165490ce2"
            ]
        ]
    },
    {
        "id": "990288c0b07710ec",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "567f64296f314b8a"
            ]
        ]
    },
    {
        "id": "8c89bbddc8ff1946",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1120,
        "y": 1160,
        "wires": [
            [
                "990288c0b07710ec"
            ]
        ]
    },
    {
        "id": "dadc1fd165490ce2",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 420,
        "y": 1160,
        "wires": [
            [
                "cb049ac75fb69645"
            ]
        ]
    },
    {
        "id": "65f08f8689f4b1ee",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "2662d247e5832ef4",
                "db79adae9b08456e"
            ]
        ]
    },
    {
        "id": "e0e44357057ba5c3",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 160,
        "y": 2340,
        "wires": [
            [
                "f7f4e351ed6248e3",
                "c14b30fed8c2b15d"
            ]
        ]
    },
    {
        "id": "f4a13cbca9ec8ca7",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1300,
        "y": 2260,
        "wires": [
            [
                "81d74a33ea5da797"
            ]
        ]
    },
    {
        "id": "34af37b65b55eacf",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 320,
        "y": 2600,
        "wires": [
            [
                "859b3bd66bc892ae"
            ]
        ]
    },
    {
        "id": "c02fc4796c3e4414",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1140,
        "y": 2600,
        "wires": [
            [
                "b9bb8e0b80aefb9d"
            ]
        ]
    },
    {
        "id": "df7a3faee1583cba",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 320,
        "y": 1960,
        "wires": [
            [
                "fdce47c8830e0420"
            ]
        ]
    },
    {
        "id": "dc3ea815b143fda4",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1160,
        "y": 1960,
        "wires": [
            [
                "fd7426e6c315f693"
            ]
        ]
    },
    {
        "id": "f7f4e351ed6248e3",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 240,
        "y": 2100,
        "wires": [
            [
                "df7a3faee1583cba",
                "07d88fd0251f9976"
            ]
        ]
    },
    {
        "id": "c14b30fed8c2b15d",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 240,
        "y": 2460,
        "wires": [
            [
                "34af37b65b55eacf",
                "14b63b61051ac714"
            ]
        ]
    },
    {
        "id": "fd7426e6c315f693",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1220,
        "y": 2100,
        "wires": [
            [
                "f4a13cbca9ec8ca7"
            ]
        ]
    },
    {
        "id": "b9bb8e0b80aefb9d",
        "type": "junction",
        "z": "2c682173eb064de0",
        "x": 1220,
        "y": 2460,
        "wires": [
            [
                "f4a13cbca9ec8ca7"
            ]
        ]
    },
    {
        "id": "849cc3e8cfb02cf5",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Scan Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"result\": [\n            {\n                \"mac_address\": \"0C:AD:ER:BE:HU:15\",\n                \"display_name\": \"MeshNode\"\n            },\n            {\n                \"mac_address\": \"10:B5:1B:15:1E:AA\",\n                \"display_name\": \"MeshNode\"\n            }\n        ]\n    };\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 860,
        "wires": [
            [
                "3c898bbf7c3df719"
            ]
        ]
    },
    {
        "id": "fc0f8e7f1e5619e8",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "e98548860d5087b6",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "50d414316f279371",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "70b03f26254364a2"
            ]
        ]
    },
    {
        "id": "35c058ec66022a16",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Ping",
        "func": "if (msg.payload == \"ping\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "50d414316f279371"
            ]
        ]
    },
    {
        "id": "718f735a79ab1db4",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/scan",
        "info": "",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "1e28c023bd1c9431",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out  : res/mesh/scan",
        "info": "",
        "x": 850,
        "y": 820,
        "wires": []
    },
    {
        "id": "628aaeee6693ac2b",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Scan Req",
        "func": "if (msg.payload == \"scan\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "849cc3e8cfb02cf5"
            ]
        ]
    },
    {
        "id": "70b03f26254364a2",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pong",
        "func": "msg.scan = false;\nmsg.pong = true;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "ca478c1c869a4381"
            ]
        ]
    },
    {
        "id": "3c898bbf7c3df719",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Scan Res",
        "func": "msg.scan = true;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "990288c0b07710ec"
            ]
        ]
    },
    {
        "id": "1e07b4314edd585b",
        "type": "debug",
        "z": "2c682173eb064de0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 160,
        "wires": []
    },
    {
        "id": "a3bcb49fdd374e06",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Pairing",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"mac_address\":\"0C:AD:ER:BE:HU:15\", \n        \"info\":\"pairing to new node.\"\n    };\n\n    // Error condition\n    // msg.payload = {\n    //     \"mac_address\":\"0C:AD:ER:BE:HU:15\",\n    //     \"info\":\"failed to connect to node.\"\n    // };\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "e3794c8ee1dd02c6"
            ]
        ]
    },
    {
        "id": "e3794c8ee1dd02c6",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pair Res",
        "func": "msg.scan = false;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1160,
        "wires": [
            [
                "8c89bbddc8ff1946"
            ]
        ]
    },
    {
        "id": "cb049ac75fb69645",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pair Req",
        "func": "if (msg.pair == \"true\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "a3bcb49fdd374e06"
            ]
        ]
    },
    {
        "id": "c24cce32ce2b54b3",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/pair",
        "info": "",
        "x": 630,
        "y": 1260,
        "wires": []
    },
    {
        "id": "67fae7c955747ddb",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : res/mesh/pair",
        "info": "",
        "x": 860,
        "y": 1260,
        "wires": []
    },
    {
        "id": "6026d2b7bbeec104",
        "type": "inject",
        "z": "2c682173eb064de0",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ping",
        "payloadType": "str",
        "x": 310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b17e40686d04010d",
        "type": "ui-template",
        "z": "2c682173eb064de0",
        "group": "2f692e7cb40097ed",
        "page": "",
        "ui": "",
        "name": "Login Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template class=\"bg-black-100\">\n  <div class=\"flex flex-col items-center justify-center h-full p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Login</h2>\n    <v-text-field v-model=\"username\" label=\"Username\" outlined></v-text-field>\n    <v-text-field v-model=\"password\" label=\"Password\" type=\"password\" outlined></v-text-field>\n    <p v-if=\"error\" class=\"text-red-500 mt-2\">{{ error }}</p>\n    <v-btn class=\"mt-4\" color=\"primary\" @click=\"login\">Login</v-btn>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n  },\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\")) {\n      this.redirectScan();\n    }\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg && newMsg.payload) {\n        const user = newMsg.payload;\n        if (this.username === user.username && this.password === user.password) {\n          this.error = \"\";\n          localStorage.setItem(\"loggedIn\", \"true\");\n          this.redirectScan();\n        } else {\n          this.error = \"Invalid username or password\";\n        }\n      }\n    }\n  },\n  methods: {\n    login() {\n      const sendObj = {\n        collection: \"users\",\n        payload: { username: this.username },\n        operation: \"findOne\"\n      };\n      this.send(sendObj);\n    },\n    redirectScan() {\n      // tell Node-RED to switch tab via ui-control\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/scan`;\n    }\n  }\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 1420,
        "wires": [
            [
                "414b2c245a73e2f4"
            ]
        ]
    },
    {
        "id": "f3bda6c28c4cdefd",
        "type": "ui-template",
        "z": "2c682173eb064de0",
        "group": "8146a75c4508b858",
        "page": "",
        "ui": "",
        "name": "Scan Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n<!-- top section -->\n<div style=\"display: flex; flex-direction: column;\" class=\"ma-3\">\n  <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n    <!-- master status -->\n    <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n        status : \n        <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n          {{ master_status }}\n        </span>\n    </strong>\n    <div>\n      <!-- refresh button -->\n      <v-btn\n        outlined\n        @click=\"\"\n        style=\"background-color: #a2af9b; color: black\"\n        class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n      >\n        REFRESH\n      </v-btn>\n      <!-- sync button -->\n      <v-btn\n        outlined\n        style=\"background-color: #a2af9b; color: black\"\n        class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4\"\n        :loading=\"isLoading\"\n        :disabled=\"isLoading\"\n        @click=\"syncSlave\"\n      >\n        <template v-slot:loader>\n          <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n        </template>\n        <span v-if=\"!isLoading\">SYNC</span>\n        <span v-else>Loading...</span>\n      </v-btn>\n    </div>\n</div>\n<!-- dashboard slave configs -->\n<v-row class=\"mt-5 pa-4 rounded-lg\" style=\"background-color: #a2af9b; color: black\">\n  <v-col\n    v-for=\"(node, index) in slave_nodes\"\n    :key=\"index\"\n    cols=\"12\"\n    sm=\"6\"\n    md=\"6\"\n    color=\"primary\"\n  >\n    <v-sheet class=\"pa-3 text-subtitle-1 text-blue-grey-darken-4 rounded-lg\"  color=\"primary\" elevation=\"1\">\n      <v-sheet color=\"primary\">\n        <p>Node Status : {{ node.node_status }}</p>\n        <p>Node ID : {{ node.node_id }}</p>\n        <p>MAC Addr : {{ node.mac_address }}</p>\n        <p>Node Type : {{ node.node_type }}</p>\n        <p>Description : {{ node.description }}</p>\n      </v-sheet>\n    </v-sheet>\n  </v-col>\n</v-row>\n</template>\n<script>\nexport default {\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n        this.redirectLogin();\n    }\n    // get data from mongoDB at first\n    this.getNodesMongoDB();\n    // ping at initial\n    this.checkMasterStatus();\n    // get slave node status\n    this.checkNodeStatus();\n  },\n  data() {\n    return {\n      slave_nodes: [],\n      getNode_request: false,\n      ping_request: false,\n      allNode_request: false,\n      activeNode_request: false,\n      isLoading: false,\n      master_status: \"offline\",\n    };\n  },\n  watch: {\n    msg(newMsg) {\n      // MongoDB handle \n\n      // getNodes handle\n      if (newMsg.type == \"MONGO_DB\" && this.getNode_request) {\n        this.isLoading = false;\n\n        // add node_status key to slave nodes\n        this.slave_nodes = Object.values(newMsg.payload).map(node => ({\n          ...node,\n          node_status: \"offline\"\n        }));\n\n        this.getNode_request = false;\n      }\n\n      // pong handler\n      if (newMsg.type == \"PONG\" && this.ping_request) {\n        this.master_status = \"online\"\n        if (this.ping_delay < 2) {\n          this.ping_delay += 2;\n        }\n        this.ping_request = false; \n      }\n\n      // get active node handler\n      if (newMsg.type == \"ACTIVE_NODE\" && this.activeNode_request) {\n        this.activeNode_request = false;\n\n        // Merge state from payload into slave_nodes\n        this.slave_nodes = this.slave_nodes.map(node => {\n          const key = node.mac_address;\n          if (newMsg.payload[key] && newMsg.payload[key].state) {\n            return {\n              ...node,\n              state: newMsg.payload[key]?.state || {},  // merge state\n              node_status: \"online\"\n            };\n          } else {\n            return {\n              ...node,\n              node_status: \"offline\"\n            };\n          }\n        });\n      }\n\n      // get all node handler\n      if (newMsg.type == \"ALL_NODE\" && this.allNode_request) {\n        this.allNode_request = false;\n        \n        // delete old slave nodes in DB\n        const dropObj = {\n          collection: \"nodes\",\n          payload: {},\n          operation: \"deleteMany\",\n          type: \"MONGO_DB\"\n        };\n        this.send(dropObj);\n\n        // upload new slave nodes to DB after 1.5 sec\n        setTimeout(() => {\n          const insertObj = {\n            collection: \"nodes\",\n            payload: [Object.values(newMsg.payload)],\n            operation: \"insertMany\",\n            type: \"MONGO_DB\"\n          };\n          this.send(insertObj);\n          this.getNodesMongoDB();\n        }, 1500);\n      }\n    }\n  },\n  methods: {\n    // prevent unlogin user\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    // send request to mongoDB to get slave nodes\n    getNodesMongoDB() {\n      const sendObj = {\n        collection: \"nodes\",\n        operation: \"find.toArray\",\n        type: \"MONGO_DB\"\n      };\n      this.getNode_request = true, \n      this.send(sendObj);\n    },\n    // check master node status every 5 sec\n    checkMasterStatus() {\n      const sendObj = {\n        payload: \"ping\",\n        type: \"PING\"\n      };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      // send ping payload to master node 5 sec interval\n      setInterval(() => {\n        this.ping_request = true; \n        // online & offline logic\n        if (this.ping_delay == 0) {\n          this.master_status = \"offline\";\n        } else {\n          this.master_status = \"online\";\n          this.ping_delay -= 1;\n        }\n        this.send(sendObj);\n      }, 5000); // 5000 ms = 5 second\n    },\n    // check slave node status every 1 sec\n    checkNodeStatus() {\n      const sendObj = {\n        payload: \"active\",\n        type: \"ACTIVE_NODE\"\n      };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      // send check payload to master node 1 sec interval\n      setInterval(() => {\n        this.activeNode_request = true; \n        this.send(sendObj);\n      }, 1000); // 1000 ms = 1 second\n    },\n    // get entire slave node to replace to mongoDB nodes collection\n    syncSlave() {\n      this.allNode_request = true;\n      const sendObj = {\n        payload: \"getAllNode\",\n        type: \"ALL_NODE\"\n      }\n      this.send(sendObj);\n      this.isLoading = true;\n    }\n  }\n};\n</script>\n\n<!-- \n\n- get active node and match to node in database to tell which node is online [ master online condition ] on open webpage\n- refresh button to get active node again\n- naming system and update to database\n- config relay slave \n- config type of sensor (button, toggle, relay)\n-->\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 540,
        "wires": [
            [
                "4d73b1b5c177d13a"
            ]
        ]
    },
    {
        "id": "81d74a33ea5da797",
        "type": "ui-template",
        "z": "2c682173eb064de0",
        "group": "dd337cb0663d76c3",
        "page": "",
        "ui": "",
        "name": "Home Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n<!-- top section -->\n<div style=\"display: flex; flex-direction: column;\" class=\"ma-3\">\n  <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n    <!-- master status -->\n    <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n        status : \n        <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n          {{ master_status }}\n        </span>\n    </strong>\n    <div>\n      <!-- refresh button -->\n      <v-btn\n        outlined\n        @click=\"\"\n        style=\"background-color: #a2af9b; color: black\"\n        class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n      >\n        REFRESH\n      </v-btn>\n      <!-- sync button -->\n      <v-btn\n        outlined\n        style=\"background-color: #a2af9b; color: black\"\n        class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4\"\n        :loading=\"isLoading\"\n        :disabled=\"isLoading\"\n        @click=\"syncSlave\"\n      >\n        <template v-slot:loader>\n          <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n        </template>\n        <span v-if=\"!isLoading\">SYNC</span>\n        <span v-else>Loading...</span>\n      </v-btn>\n    </div>\n</div>\n<!-- dashboard slave configs -->\n<v-row class=\"mt-5 pa-4 rounded-lg\" style=\"background-color: #a2af9b; color: black\">\n  <v-col\n    v-for=\"(node, index) in slave_nodes\"\n    :key=\"index\"\n    cols=\"12\"\n    sm=\"6\"\n    md=\"6\"\n    color=\"primary\"\n  >\n    <v-sheet class=\"pa-3 text-subtitle-1 text-blue-grey-darken-4 rounded-lg\"  color=\"primary\" elevation=\"1\">\n      <v-sheet color=\"primary\">\n        <p>Node Status : {{ node.node_status }}</p>\n        <p>Node ID : {{ node.node_id }}</p>\n        <p>MAC Addr : {{ node.mac_address }}</p>\n        <p>Node Type : {{ node.node_type }}</p>\n        <p>Description : {{ node.description }}</p>\n      </v-sheet>\n    </v-sheet>\n  </v-col>\n</v-row>\n</template>\n<script>\nexport default {\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n        this.redirectLogin();\n    }\n    // get data from mongoDB at first\n    this.getNodesMongoDB();\n    // ping at initial\n    this.checkMasterStatus();\n    // get slave node status\n    this.checkNodeStatus();\n  },\n  data() {\n    return {\n      slave_nodes: [],\n      getNode_request: false,\n      ping_request: false,\n      allNode_request: false,\n      activeNode_request: false,\n      isLoading: false,\n      master_status: \"offline\",\n    };\n  },\n  watch: {\n    msg(newMsg) {\n      // MongoDB handle \n\n      // getNodes handle\n      if (newMsg.type == \"MONGO_DB\" && this.getNode_request) {\n        this.isLoading = false;\n\n        // add node_status key to slave nodes\n        this.slave_nodes = Object.values(newMsg.payload).map(node => ({\n          ...node,\n          node_status: \"offline\"\n        }));\n\n        this.getNode_request = false;\n      }\n\n      // pong handler\n      if (newMsg.type == \"PONG\" && this.ping_request) {\n        this.master_status = \"online\"\n        if (this.ping_delay < 2) {\n          this.ping_delay += 2;\n        }\n        this.ping_request = false; \n      }\n\n      // get active node handler\n      if (newMsg.type == \"ACTIVE_NODE\" && this.activeNode_request) {\n        this.activeNode_request = false;\n\n        // Merge state from payload into slave_nodes\n        this.slave_nodes = this.slave_nodes.map(node => {\n          const key = node.mac_address;\n          if (newMsg.payload[key] && newMsg.payload[key].state) {\n            return {\n              ...node,\n              state: newMsg.payload[key]?.state || {},  // merge state\n              node_status: \"online\"\n            };\n          } else {\n            console.log(\"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n            return {\n              ...node,\n              node_status: \"offline\"\n            };\n          }\n        });\n      }\n\n      // get all node handler\n      if (newMsg.type == \"ALL_NODE\" && this.allNode_request) {\n        this.allNode_request = false;\n        \n        // delete old slave nodes in DB\n        const dropObj = {\n          collection: \"nodes\",\n          payload: {},\n          operation: \"deleteMany\",\n          type: \"MONGO_DB\"\n        };\n        this.send(dropObj);\n\n        // upload new slave nodes to DB after 1.5 sec\n        setTimeout(() => {\n          const insertObj = {\n            collection: \"nodes\",\n            payload: [Object.values(newMsg.payload)],\n            operation: \"insertMany\",\n            type: \"MONGO_DB\"\n          };\n          this.send(insertObj);\n          this.getNodesMongoDB();\n        }, 1500);\n      }\n    }\n  },\n  methods: {\n    // prevent unlogin user\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    // send request to mongoDB to get slave nodes\n    getNodesMongoDB() {\n      const sendObj = {\n        collection: \"nodes\",\n        operation: \"find.toArray\",\n        type: \"MONGO_DB\"\n      };\n      this.getNode_request = true, \n      this.send(sendObj);\n    },\n    // check master node status every 5 sec\n    checkMasterStatus() {\n      const sendObj = {\n        payload: \"ping\",\n        type: \"PING\"\n      };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      // send ping payload to master node 5 sec interval\n      setInterval(() => {\n        this.ping_request = true; \n        // online & offline logic\n        if (this.ping_delay == 0) {\n          this.master_status = \"offline\";\n        } else {\n          this.master_status = \"online\";\n          this.ping_delay -= 1;\n        }\n        this.send(sendObj);\n      }, 5000); // 5000 ms = 5 second\n    },\n    // check slave node status every 1 sec\n    checkNodeStatus() {\n      const sendObj = {\n        payload: \"active\",\n        type: \"ACTIVE_NODE\"\n      };\n      this.activeNode_request = true;\n      this.send(sendObj);\n\n      // send check payload to master node 1 sec interval\n      setInterval(() => {\n        this.activeNode_request = true; \n        this.send(sendObj);\n      }, 1000); // 1000 ms = 1 second\n    },\n    // get entire slave node to replace to mongoDB nodes collection\n    syncSlave() {\n      this.allNode_request = true;\n      const sendObj = {\n        payload: \"getAllNode\",\n        type: \"ALL_NODE\"\n      }\n      this.send(sendObj);\n      this.isLoading = true;\n    }\n  }\n};\n</script>\n\n<!-- \n\n- get active node and match to node in database to tell which node is online [ master online condition ] on open webpage\n- refresh button to get active node again\n- naming system and update to database\n- config relay slave \n- config type of sensor (button, toggle, relay)\n-->\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 2300,
        "wires": [
            [
                "e0e44357057ba5c3"
            ]
        ],
        "inputLabels": [
            "tyesty"
        ]
    },
    {
        "id": "414b2c245a73e2f4",
        "type": "mongodb3 in",
        "z": "2c682173eb064de0",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 720,
        "y": 1560,
        "wires": [
            [
                "b17e40686d04010d"
            ]
        ]
    },
    {
        "id": "60f63e5e64f49467",
        "type": "mongodb3 in",
        "z": "2c682173eb064de0",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 740,
        "y": 2720,
        "wires": [
            [
                "1e4b8208b3d66eb8"
            ]
        ]
    },
    {
        "id": "0b82205ee75a6ba7",
        "type": "inject",
        "z": "2c682173eb064de0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "pair",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0C:AD:ER:BE:HU:15\"",
        "payloadType": "str",
        "x": 320,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "1d0bd63eacdc4dfc",
        "type": "inject",
        "z": "2c682173eb064de0",
        "name": "Pseudo Paired",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"mac_address\":\"0C:AD:ER:BE:HU:15\",\"node_id\":1950750929,\"node_type\":\"sensor\",\"info\":\"pair success!\"}",
        "payloadType": "json",
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "e3794c8ee1dd02c6"
            ]
        ]
    },
    {
        "id": "c68ea67af5dd77d5",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : res/mesh/pair",
        "info": "",
        "x": 610,
        "y": 960,
        "wires": []
    },
    {
        "id": "e103019d912b0671",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Active Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"A8:46:74:46:18:DC\": {\n            \"mac_address\": \"A8:46:74:46:18:DC\",\n            \"node_id\": 1950750941,\n            \"node_type\": \"relay\",\n            \"state\": {\n            \"r1\": true,\n            \"r2\": true\n            }\n        },\n        \"A8:46:74:46:18:D0\": {\n            \"mac_address\": \"A8:46:74:46:18:D0\",\n            \"node_id\": 1950750929,\n            \"node_type\": \"sensor\",\n            \"state\": {\n            \"gpio_0\": false,\n            \"gpio_1\": false,\n            \"gpio_3\": false\n            }\n        }\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2460,
        "wires": [
            [
                "e05016ef1c99d9ab"
            ]
        ]
    },
    {
        "id": "14b63b61051ac714",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Active Node Req",
        "func": "if (msg.type == \"ACTIVE_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2460,
        "wires": [
            [
                "e103019d912b0671"
            ]
        ]
    },
    {
        "id": "e05016ef1c99d9ab",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Active Node Res",
        "func": "msg.type = \"ACTIVE_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2460,
        "wires": [
            [
                "b9bb8e0b80aefb9d"
            ]
        ]
    },
    {
        "id": "a5a7bd0418d69e9a",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo All Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"A8:46:74:46:18:DC\": {\n            \"mac_address\": \"A8:46:74:46:18:DC\",\n            \"node_id\": 1950750941,\n            \"node_type\": \"relay\"\n        },\n        \"A8:46:74:46:18:D0\": {\n            \"mac_address\": \"A8:46:74:46:18:D0\",\n            \"node_id\": 1950750929,\n            \"node_type\": \"sensor\"\n        }\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2100,
        "wires": [
            [
                "52d435fc7da18a62"
            ]
        ]
    },
    {
        "id": "07d88fd0251f9976",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter All Node Req",
        "func": "if (msg.type == \"ALL_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2100,
        "wires": [
            [
                "a5a7bd0418d69e9a"
            ]
        ]
    },
    {
        "id": "52d435fc7da18a62",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter All Node Res",
        "func": "msg.type = \"ALL_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 2100,
        "wires": [
            [
                "fd7426e6c315f693"
            ]
        ]
    },
    {
        "id": "859b3bd66bc892ae",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Req Mongo",
        "func": "if (msg.type == \"MONGO_DB\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2600,
        "wires": [
            [
                "60f63e5e64f49467"
            ]
        ]
    },
    {
        "id": "1e4b8208b3d66eb8",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Res Mongo",
        "func": "if (!msg.payload.result) {\n    msg.type = \"MONGO_DB\";\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2600,
        "wires": [
            [
                "c02fc4796c3e4414"
            ]
        ]
    },
    {
        "id": "db79adae9b08456e",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Mongo",
        "func": "if (msg.toMongo){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "90f6a692f0f33d60"
            ]
        ]
    },
    {
        "id": "90f6a692f0f33d60",
        "type": "mongodb3 in",
        "z": "2c682173eb064de0",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 800,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "55a623171fc79f7d",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/allnodes",
        "info": "",
        "x": 580,
        "y": 2040,
        "wires": []
    },
    {
        "id": "d3363709dc27bd68",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : req/mesh/allnodes",
        "info": "",
        "x": 840,
        "y": 2040,
        "wires": []
    },
    {
        "id": "3529f7b1daa289a4",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : req/mesh/nodes",
        "info": "",
        "x": 590,
        "y": 2520,
        "wires": []
    },
    {
        "id": "62b7f6335b217409",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : req/mesh/nodes",
        "info": "",
        "x": 870,
        "y": 2520,
        "wires": []
    },
    {
        "id": "d19c169f0e8a8e3a",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 620,
        "y": 1780,
        "wires": []
    },
    {
        "id": "d05016c063f7ce6a",
        "type": "comment",
        "z": "2c682173eb064de0",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 810,
        "y": 1780,
        "wires": []
    },
    {
        "id": "940767fa7b87149e",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1820,
        "wires": [
            [
                "a8ef2b924362df80"
            ]
        ]
    },
    {
        "id": "fdce47c8830e0420",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Ping",
        "func": "if (msg.type == \"PING\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1960,
        "wires": [
            [
                "940767fa7b87149e"
            ]
        ]
    },
    {
        "id": "a8ef2b924362df80",
        "type": "function",
        "z": "2c682173eb064de0",
        "name": "Filter Pong",
        "func": "msg.type = \"PONG\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1960,
        "wires": [
            [
                "dc3ea815b143fda4"
            ]
        ]
    },
    {
        "id": "9495a6eaaea64898",
        "type": "ui_spacer",
        "z": "2c682173eb064de0",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "2f692e7cb40097ed",
        "type": "ui-group",
        "name": "Login Group",
        "page": "f721a59bf36641c2",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8146a75c4508b858",
        "type": "ui-group",
        "name": "Scan Group",
        "page": "b5fbde398eca86ab",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "dd337cb0663d76c3",
        "type": "ui-group",
        "name": "Home",
        "page": "b820a1f0025766bd",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "013c016d2aaac063",
        "type": "mongodb3",
        "uri": "mongodb+srv://tuwaris:5D4Wyu40hIK64EFh@tuwaris.5ynbx.mongodb.net/smart_home?retryWrites=true&w=majority&appName=Tuwaris",
        "name": "smart_home",
        "options": "{ “useNewUrlParser”: true}",
        "parallelism": -1
    },
    {
        "id": "f721a59bf36641c2",
        "type": "ui-page",
        "name": "Login",
        "ui": "9c6816c5eb8f8852",
        "path": "/login",
        "icon": "login",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b5fbde398eca86ab",
        "type": "ui-page",
        "name": "Scan",
        "ui": "9c6816c5eb8f8852",
        "path": "/scan",
        "icon": "wifi",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b820a1f0025766bd",
        "type": "ui-page",
        "name": "Home",
        "ui": "9c6816c5eb8f8852",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6816c5eb8f8852",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "6ba0f05d9b3e74ec",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#a2af9b",
            "primary": "#dccfc0",
            "bgPage": "#faf9ee",
            "groupBg": "#eeeeee",
            "groupOutline": "#e3e3e3"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "24ba0fa58a5d0844",
        "type": "global-config",
        "env": [],
        "modules": {
            "@flowfuse/node-red-dashboard": "1.27.2",
            "node-red-contrib-mongodb3": "2.0.1",
            "node-red-dashboard": "3.6.6"
        }
    }
]