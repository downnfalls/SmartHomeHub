[
    {
        "id": "21a8425e13dab42c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80c1f42a3eb520d4",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "f0b92bb382e426fc",
                "e43f653e5a622652"
            ]
        ]
    },
    {
        "id": "e21d3d5c27e93b92",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "9c47a4d46955fb8b"
            ]
        ]
    },
    {
        "id": "28d90265ddb3c64a",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "e21d3d5c27e93b92"
            ]
        ]
    },
    {
        "id": "bc22270cd8f47a86",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 340,
        "y": 280,
        "wires": [
            [
                "62be40d59041ebe3"
            ]
        ]
    },
    {
        "id": "f0b92bb382e426fc",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 260,
        "y": 720,
        "wires": [
            [
                "f33adaf25bc294b7",
                "9db525871cc6acb4"
            ]
        ]
    },
    {
        "id": "9db525871cc6acb4",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 340,
        "y": 960,
        "wires": [
            [
                "6639f8d88f83d7cb"
            ]
        ]
    },
    {
        "id": "440ba3be74b8325f",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "e21d3d5c27e93b92"
            ]
        ]
    },
    {
        "id": "cef8165af4c58351",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1120,
        "y": 1160,
        "wires": [
            [
                "440ba3be74b8325f"
            ]
        ]
    },
    {
        "id": "6639f8d88f83d7cb",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 420,
        "y": 1160,
        "wires": [
            [
                "d7993fff72f16936"
            ]
        ]
    },
    {
        "id": "e43f653e5a622652",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "bc22270cd8f47a86",
                "eb728879abec346b"
            ]
        ]
    },
    {
        "id": "b078b8d3d2fd3617",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 300,
        "y": 2360,
        "wires": [
            [
                "a970e07851ad74e1",
                "fec6367f9cf9395f"
            ]
        ]
    },
    {
        "id": "9546b4b379bdc9d8",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1440,
        "y": 2280,
        "wires": [
            [
                "8d5ecd01d03c56ac"
            ]
        ]
    },
    {
        "id": "7c0dccc3bc481064",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 460,
        "y": 2620,
        "wires": [
            [
                "a1d8ca7e2539a46b"
            ]
        ]
    },
    {
        "id": "2528679df8f1d904",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1280,
        "y": 2620,
        "wires": [
            [
                "5d5e081255e5400f"
            ]
        ]
    },
    {
        "id": "f152d2eefb1a9516",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 460,
        "y": 1980,
        "wires": [
            [
                "e297a3b9ae1cbcbd"
            ]
        ]
    },
    {
        "id": "d4f41d69dae99d15",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1300,
        "y": 1980,
        "wires": [
            [
                "2c782a9585346e96"
            ]
        ]
    },
    {
        "id": "a970e07851ad74e1",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 380,
        "y": 2120,
        "wires": [
            [
                "f152d2eefb1a9516",
                "9c5c5015ec2c6c99"
            ]
        ]
    },
    {
        "id": "fec6367f9cf9395f",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 380,
        "y": 2480,
        "wires": [
            [
                "7c0dccc3bc481064",
                "b6d57abdebf1d40b"
            ]
        ]
    },
    {
        "id": "2c782a9585346e96",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1360,
        "y": 2120,
        "wires": [
            [
                "9546b4b379bdc9d8"
            ]
        ]
    },
    {
        "id": "5d5e081255e5400f",
        "type": "junction",
        "z": "21a8425e13dab42c",
        "x": 1360,
        "y": 2480,
        "wires": [
            [
                "9546b4b379bdc9d8"
            ]
        ]
    },
    {
        "id": "669de74ca5e7e65d",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Pseudo Scan Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"result\": [\n            {\n                \"mac_address\": \"0C:AD:ER:BE:HU:15\",\n                \"display_name\": \"MeshNode\"\n            },\n            {\n                \"mac_address\": \"10:B5:1B:15:1E:AA\",\n                \"display_name\": \"MeshNode\"\n            }\n        ]\n    };\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 860,
        "wires": [
            [
                "fd34ed4d875faeef"
            ]
        ]
    },
    {
        "id": "47bf743449316b73",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "2a2fb8fe10a431c2",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "309ef8e1af66ebab",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "6abaf049b878cec2"
            ]
        ]
    },
    {
        "id": "62be40d59041ebe3",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Ping",
        "func": "if (msg.payload == \"ping\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "309ef8e1af66ebab"
            ]
        ]
    },
    {
        "id": "2d6673208c07d22e",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt in : req/mesh/scan",
        "info": "",
        "x": 620,
        "y": 820,
        "wires": []
    },
    {
        "id": "c5a34f74a2cfeb74",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out  : res/mesh/scan",
        "info": "",
        "x": 850,
        "y": 820,
        "wires": []
    },
    {
        "id": "f33adaf25bc294b7",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Scan Req",
        "func": "if (msg.payload == \"scan\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "669de74ca5e7e65d"
            ]
        ]
    },
    {
        "id": "6abaf049b878cec2",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Pong",
        "func": "msg.scan = false;\nmsg.pong = true;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "28d90265ddb3c64a"
            ]
        ]
    },
    {
        "id": "fd34ed4d875faeef",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Scan Res",
        "func": "msg.scan = true;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "440ba3be74b8325f"
            ]
        ]
    },
    {
        "id": "e3dc7b2398369462",
        "type": "debug",
        "z": "21a8425e13dab42c",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 160,
        "wires": []
    },
    {
        "id": "a271cd6751f8bc3c",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Pseudo Pairing",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"mac_address\":\"0C:AD:ER:BE:HU:15\", \n        \"info\":\"pairing to new node.\"\n    };\n\n    // Error condition\n    // msg.payload = {\n    //     \"mac_address\":\"0C:AD:ER:BE:HU:15\",\n    //     \"info\":\"failed to connect to node.\"\n    // };\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1300,
        "wires": [
            [
                "a7c14fd86c07c7ce"
            ]
        ]
    },
    {
        "id": "a7c14fd86c07c7ce",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Pair Res",
        "func": "msg.scan = false;\nmsg.pong = false;\nmsg.info = false;\nmsg.pair = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1160,
        "wires": [
            [
                "cef8165af4c58351"
            ]
        ]
    },
    {
        "id": "d7993fff72f16936",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Pair Req",
        "func": "if (msg.pair == \"true\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1160,
        "wires": [
            [
                "a271cd6751f8bc3c"
            ]
        ]
    },
    {
        "id": "a49fb92046336361",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt in : req/mesh/pair",
        "info": "",
        "x": 630,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3a13ba379876f880",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out : res/mesh/pair",
        "info": "",
        "x": 860,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d8b3763e7933e9d0",
        "type": "inject",
        "z": "21a8425e13dab42c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ping",
        "payloadType": "str",
        "x": 310,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "da39dedd13816da0",
        "type": "ui-template",
        "z": "21a8425e13dab42c",
        "group": "2f692e7cb40097ed",
        "page": "",
        "ui": "",
        "name": "Login Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template class=\"bg-black-100\">\n  <div class=\"flex flex-col items-center justify-center h-full p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Login</h2>\n    <v-text-field v-model=\"username\" label=\"Username\" outlined></v-text-field>\n    <v-text-field v-model=\"password\" label=\"Password\" type=\"password\" outlined></v-text-field>\n    <p v-if=\"error\" class=\"text-red-500 mt-2\">{{ error }}</p>\n    <v-btn class=\"mt-4\" color=\"primary\" @click=\"login\">Login</v-btn>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n  },\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\")) {\n      this.redirectScan();\n    }\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg && newMsg.payload) {\n        const user = newMsg.payload;\n        if (this.username === user.username && this.password === user.password) {\n          this.error = \"\";\n          localStorage.setItem(\"loggedIn\", \"true\");\n          this.redirectScan();\n        } else {\n          this.error = \"Invalid username or password\";\n        }\n      }\n    }\n  },\n  methods: {\n    login() {\n      const sendObj = {\n        collection: \"users\",\n        payload: { username: this.username },\n        operation: \"findOne\"\n      };\n      this.send(sendObj);\n    },\n    redirectScan() {\n      // tell Node-RED to switch tab via ui-control\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/scan`;\n    }\n  }\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 1420,
        "wires": [
            [
                "63bcf1b8afc8d71f"
            ]
        ]
    },
    {
        "id": "9c47a4d46955fb8b",
        "type": "ui-template",
        "z": "21a8425e13dab42c",
        "group": "8146a75c4508b858",
        "page": "",
        "ui": "",
        "name": "Scan Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n  <div class=\"mesh-detail\">\n    <!-- Top action buttons: one left, one right -->\n    <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n      <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n          status : \n          <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n            {{ master_status }}\n          </span>\n        </strong>\n      <div>\n        <v-btn\n          outlined\n          @click=\"scanNodes\"\n          style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n        >\n          SCAN\n        </v-btn>\n\n        <v-btn\n        color=\"red-darken-1\"\n        outlined\n        @click=\"deleteAllNodes\"\n        class=\"font-weight-bold text-subtitle-1\"\n      >\n        RESET !\n      </v-btn>\n      </div>\n    </div>\n\n    <!-- Nodes displayed inline (only mesh_slave: false) -->\n    <div class=\"nodes-container pa-4 rounded-lg\" style=\"background-color: #a2af9b;\">\n      <div\n        v-for=\"(node, index) in nodes_detected.filter(n => !n.mesh_slave)\"\n        :key=\"index\"\n        class=\"node-item\"\n      >\n        <!-- Dialog wrapping node button -->\n        <v-dialog\n          v-model=\"node.active\"\n          transition=\"dialog-bottom-transition\"\n          class=\"w-auto\"\n          style=\"max-width: 400px;\"\n        >\n          <template v-slot:activator=\"{ props: activatorProps }\">\n            <v-btn\n              v-bind=\"activatorProps\"\n              class=\"pt-2 pb-2\"\n              color=\"primary\"\n              \n            >\n            <div class=\"d-lg-flex d-xs-block\">\n              <div class=\"mr-lg-4\">\n                Node Name: {{ node.display_name }}\n                <br /><br />\n                MAC Addr: {{ node.mac_address }}\n              </div>\n              <!-- Delete button stays on card -->\n              <v-btn\n                color=\"red-darken-1\"\n                small\n                class=\"\"\n                @click.stop=\"deleteNode(index)\"\n              >\n                Delete\n              </v-btn>\n            </div>\n            </v-btn>\n          </template>\n\n          <!-- Popup content -->\n          <v-card>\n            <v-toolbar title=\"New Slave\" style=\"background-color: #a2af9b;\"></v-toolbar>\n\n            <v-card-text>\n              <p class=\"mb-2\"><strong>Node Name:</strong> {{ node.display_name }}</p>\n              <p class=\"mb-2\"><strong>MAC Address:</strong> {{ node.mac_address }}</p>\n              <p>\n                <strong>Description:</strong>\n                <v-text-field v-model=\"description\" label=\"Description\" outlined class=\"mt-2\"></v-text-field>\n              </p>\n            </v-card-text>\n\n            <v-card-actions class=\"justify-space-between\">\n              <v-btn\n                  style=\"background-color: #a2af9b; color: black\"\n                  :loading=\"isLoading\"\n                  :disabled=\"isLoading\"\n                  @click=\"addSlave(node)\"\n                >\n                  <template v-slot:loader>\n                    <v-progress-circular indeterminate color=\"white\" size=\"20\"></v-progress-circular>\n                  </template>\n                  <span v-if=\"!isLoading\">Pair</span>\n                  <span v-else>Loading...</span>\n                </v-btn>\n\n              <v-btn\n                @click=\"cancelAddSlave(node)\"\n                style=\"background-color: #90a4ae; color: black\"\n              >\n                Cancel\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </div>\n    </div>\n  </div>\n  <!-- Top notification -->\n    <v-snackbar\n      v-model=\"snackbar\"\n      top\n      absolute\n      :timeout=\"notify_timeout\"\n      :color=\"notify_color\"\n      elevation=\"5\"\n    >\n      {{ message }}\n      <template v-slot:actions>\n        <v-btn text @click=\"snackbar = false\">Close</v-btn>\n      </template>\n    </v-snackbar>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      nodes_detected: [],\n      description: \"\",\n      pair_display_name: \"\",\n      pair_mac_addr: \"\",\n      master_status: \"offline\",\n      ping_delay: 0,\n      ping_request: false, // filter msg ping\n      scan_request: false, // filter msg scan\n      pair_request: false, // filter msg pair\n      isLoading: false,\n      snackbar: false, // control notify visibility\n      message: '', // message of notify\n      notify_color: \"teal\",\n      notify_timeout: 0\n    };\n  },\n  mounted() {\n    // invoke logic function\n    this.checkStatus();\n    this.scanNodes();\n\n    // Load saved nodes from localStorage\n    const savedNodes = localStorage.getItem(\"nodes_detected\");\n    if (savedNodes) {\n      try {\n        this.nodes_detected = JSON.parse(savedNodes).map(n => ({\n          ...n,\n          active: false, // ensure active property exists\n        }));\n      } catch (e) {\n        console.error(\"Failed to parse nodes_detected from localStorage\", e);\n      }\n    }\n\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n      this.redirectLogin();\n    }\n\n    // Load data from localStorage\n\n    const description = localStorage.getItem(\"description\");\n    const pair_display_name = localStorage.getItem(\"pair_display_name\");\n    const pair_mac_addr = localStorage.getItem(\"pair_mac_addr\");\n    const isLoading = localStorage.getItem(\"isLoading\");\n\n    if (description && description != \"\") {\n        this.description = description;\n    }\n\n    if (pair_display_name && pair_display_name != \"\") {\n      this.pair_display_name = pair_display_name;\n    }\n\n    if (pair_mac_addr && pair_mac_addr != \"\") {\n      this.pair_mac_addr = pair_mac_addr;\n    }\n    if (isLoading == \"true\") {\n      this.isLoading = true;\n    } else {\n      this.isLoading = false;\n    }\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        // node scan res handler\n        if (newMsg && newMsg.scan && this.scan_request) {\n          const payload = { ...newMsg.payload };\n          payload.result.forEach(item => {\n            const node = { \n              ...item, \n              mesh_slave: false, \n              active: false \n            };\n\n            const exists = this.nodes_detected.some(\n              n => n.mac_address === node.mac_address && n.display_name === node.display_name\n            );\n\n            if (!exists) {\n              this.nodes_detected.push(node);\n              console.log(\"New node detected:\", node);\n            }\n          });\n          this.scan_request = false; \n        }\n\n        // pong handler\n        if (newMsg && newMsg.pong && this.ping_request) {\n          this.master_status = \"online\"\n          if (this.ping_delay < 2) {\n            this.ping_delay += 2;\n          }\n          this.ping_request = false; \n        }\n\n        // pair handler and if have pair successed it will auto allow\n        if (newMsg && newMsg.pair && (this.pair_request || newMsg.payload.mac_address == this.pair_mac_addr)) {\n          this.pair_request = false;\n\n          // check pair status\n          switch (newMsg.payload.info) {\n            case \"pairing to new node.\":\n              // change to loading state\n              this.isLoading = true;\n\n              // Save to localStorage\n              localStorage.setItem(\"description\", this.description);\n              localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n              localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n              localStorage.setItem(\"isLoading\", this.isLoading);\n\n              console.log(\"Info : Wait for pairing..\");\n              this.showNotification(\"Info : Wait for pairing..\", \"blue\");\n              \n              // wait for paired from esp32\n              break;\n            case \"failed to connect to node.\":\n              console.log(\"Error : Failed to connect to node!!\");\n              this.showNotification(\"Error : Failed to connect to node!!\", \"red\");\n              break;\n            case \"pair success!\":\n              console.log(\"Info : Pair succeed!!\");\n              this.showNotification(\"Info : Pair succeed!!\", \"green\");\n\n              // save to mongoDB database\n              const sendObj = {\n                collection: \"nodes\",\n                payload: { \n                  mac_address: newMsg.payload.mac_address,\n                  node_id: newMsg.payload.node_id,\n                  node_type: newMsg.payload.node_type,\n                  description: this.description\n                },\n                operation: \"insertOne\",\n                toMongo: true\n              };\n\n              this.send(sendObj);\n\n              // Set mesh_slave = true so it no longer appears in scan section\n              const targetNode = this.nodes_detected.find(\n                n => n.mac_address === this.pair_mac_addr && n.display_name === this.pair_display_name\n              );\n              if (targetNode) {\n                targetNode.mesh_slave = true;\n                localStorage.setItem(\"nodes_detected\", JSON.stringify(this.nodes_detected));\n              }\n              this.isLoading = false;\n              // reset pairing node info\n              this.description = \"\";\n              this.pair_display_name = \"\";\n              this.pair_mac_addr = \"\";\n\n              // Save to localStorage\n              localStorage.setItem(\"description\", this.description);\n              localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n              localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n              localStorage.setItem(\"isLoading\", this.isLoading);\n              break;\n            default:\n              console.log(\"Some error occurred!!\");\n              this.showNotification(\"Error : Some error occurred!!\", \"red\");\n          }\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    showNotification(msg = 'Notification shown at the top!', color = \"teal\") {\n      this.notify_timeout += 3000;\n      this.message = msg;\n      this.notify_color = color;\n      this.snackbar = true;\n      // Optional: send message to Node-RED backend\n      this.$emit('send', { payload: 'top_notification_shown' });\n    },\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    deleteNode(index) {\n      this.nodes_detected.splice(index, 1);\n      localStorage.setItem(\n        \"nodes_detected\",\n        JSON.stringify(this.nodes_detected)\n      );\n    },\n    deleteAllNodes() {\n      if (confirm(\"Are you sure you want to delete all nodes?\")) {\n        this.nodes_detected = [];\n        localStorage.removeItem(\"nodes_detected\");\n        const sendObj = {\n          collection: \"nodes\",\n          operation: \"drop\",\n          toMongo: true\n        };\n        this.send(sendObj);\n      }\n    },\n    addSlave(node) {\n      this.pair_display_name = node.display_name;\n      this.pair_mac_addr = node.mac_address;\n\n      // send pairing request\n      const sendObj = {\n        payload : node.mac_address,\n        pair : \"true\"\n      };\n      this.pair_request = true;\n      \n      // handle master offline\n      if (this.master_status == \"offline\") {\n        console.log(\"Error : Master is offline!!\");\n        this.showNotification(\"Error : Master is offline!!\", \"red\");\n        return;\n      }\n\n      if (this.isLoading) {\n        console.log(\"Warning : Cannot pair node while pairing!!\");\n        this.showNotification(\"Warning : Cannot pair node while pairing!!\", \"yellow\");\n        return;\n      }\n\n      this.send(sendObj);\n\n      // Send message to Node-RED backend\n      this.$emit('send', { payload: 'button_clicked' });\n    },\n    checkStatus() {\n      const sendObj = {\n        payload: \"ping\"\n      };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      // send ping payload to master node 5 sec interval\n      setInterval(() => {\n        this.ping_request = true; \n        // online & offline logic\n        if (this.ping_delay == 0) {\n          this.master_status = \"offline\";\n        } else {\n          this.master_status = \"online\";\n          this.ping_delay -= 1;\n        }\n        this.send(sendObj);\n      }, 5000); // 1000 ms = 1 second\n    },\n    scanNodes() {\n      const sendObj = {\n        payload: \"scan\"\n      };\n      this.scan_request = true; \n      this.send(sendObj);\n    },\n    cancelAddSlave(node) {\n      if (this.isLoading == false) {\n        // close dialog pop up\n        node.active = false;\n      } else {\n        if (confirm(\"Do you want to cancel ?\\n[ cancel after pairing you have to sync mesh ]\")) {\n          this.isLoading = false;\n          this.pair_display_name = \"\";\n          this.pair_mac_addr = \"\";\n          this.description = \"\";\n\n          // Save to localStorage\n          localStorage.setItem(\"description\", this.description);\n          localStorage.setItem(\"pair_display_name\", this.pair_display_name);\n          localStorage.setItem(\"pair_mac_addr\", this.pair_mac_addr);\n          localStorage.setItem(\"isLoading\", this.isLoading);\n\n          // close dialog pop up\n          node.active = false;\n        }\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n.top-buttons {\n  margin: 10px;\n}\n\n.mesh-detail {\n  display: flex;\n  flex-direction: column;\n  margin: 10px;\n}\n\n.nodes-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.node-item {\n  display: inline-block;\n}\n\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 540,
        "wires": [
            [
                "80c1f42a3eb520d4"
            ]
        ]
    },
    {
        "id": "8d5ecd01d03c56ac",
        "type": "ui-template",
        "z": "21a8425e13dab42c",
        "group": "dd337cb0663d76c3",
        "page": "",
        "ui": "",
        "name": "Home Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n<!-- top section -->\n<div style=\"display: flex; flex-direction: column;\" class=\"ma-3\">\n  <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n    <!-- master status -->\n    <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n        status : \n        <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n          {{ master_status }}\n        </span>\n    </strong>\n    <div>\n      <!-- refresh button -->\n      <v-btn\n        outlined\n        @click=\"\"\n        style=\"background-color: #a2af9b; color: black\"\n        class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n      >\n        REFRESH\n      </v-btn>\n      <!-- sync button -->\n      <v-btn\n        outlined\n        @click=\"\"\n        style=\"background-color: #a2af9b; color: black\"\n        class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4\"\n      >\n        SYNC\n      </v-btn>\n    </div>\n</div>\n<!-- dashboard slave configs -->\n<v-row class=\"mt-5 pa-4 rounded-lg\" style=\"background-color: #a2af9b; color: black\">\n  <v-col\n    v-for=\"(node, index) in slave_nodes\"\n    :key=\"index\"\n    cols=\"12\"\n    sm=\"6\"\n    md=\"6\"\n    color=\"primary\"\n  >\n    <v-sheet class=\"pa-3 text-subtitle-1 text-blue-grey-darken-4 rounded-lg\"  color=\"primary\" elevation=\"1\">\n      <v-sheet color=\"primary\">\n        <p>Node ID : {{ node.node_id }}</p>\n        <p>MAC Addr : {{ node.mac_address }}</p>\n        <p>Node Type : {{ node.node_type }}</p>\n        <p>Description : {{ node.description }}</p>\n      </v-sheet>\n    </v-sheet>\n  </v-col>\n</v-row>\n</template>\n<script>\nexport default {\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n        this.redirectLogin();\n    }\n    \n    // get data from mongoDB at first\n    this.getNodesMongoDB();\n    // ping at initial\n    this.checkStatus();\n  },\n  data() {\n    return {\n      slave_nodes: [],\n      getNode_request: false,\n      ping_request: false, \n      master_status: \"offline\",\n    };\n  },\n  watch: {\n    msg(newMsg) {\n      // MongoDB handle \n\n      // getNodes handle\n      if (newMsg.type == \"MONGO_DB\" && this.getNode_request) {\n        this.slave_nodes = newMsg.payload;\n        this.getNode_request = false;\n        console.log(this.slave_nodes);\n      }\n\n      // pong handler\n      if (newMsg.type == \"PONG\" && this.ping_request) {\n        this.master_status = \"online\"\n        if (this.ping_delay < 2) {\n          this.ping_delay += 2;\n        }\n        this.ping_request = false; \n      }\n    }\n  },\n  methods: {\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    getNodesMongoDB() {\n      const sendObj = {\n        collection: \"nodes\",\n        operation: \"find.toArray\",\n        type: \"MONGO_DB\"\n      };\n      this.getNode_request = true, \n      this.send(sendObj);\n    },\n    checkStatus() {\n      const sendObj = {\n        payload: \"ping\",\n        type: \"PING\"\n      };\n      this.ping_request = true;\n      this.send(sendObj);\n\n      // send ping payload to master node 5 sec interval\n      setInterval(() => {\n        this.ping_request = true; \n        // online & offline logic\n        if (this.ping_delay == 0) {\n          this.master_status = \"offline\";\n        } else {\n          this.master_status = \"online\";\n          this.ping_delay -= 1;\n        }\n        this.send(sendObj);\n      }, 5000); // 1000 ms = 1 second\n    },\n  }\n};\n</script>\n\n<!-- \n\n- master status label\n- sync button for sync slave database with mesh slave\n- get active node and match to node in database to tell which node is online [ master online condition ] on open webpage\n- refresh button to get active node again\n- naming system and update to database\n- config relay slave \n- config type of sensor (button, toggle, relay)\n-->",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 2320,
        "wires": [
            [
                "b078b8d3d2fd3617"
            ]
        ],
        "inputLabels": [
            "tyesty"
        ]
    },
    {
        "id": "63bcf1b8afc8d71f",
        "type": "mongodb3 in",
        "z": "21a8425e13dab42c",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 720,
        "y": 1560,
        "wires": [
            [
                "da39dedd13816da0"
            ]
        ]
    },
    {
        "id": "e07b8919c4efb01b",
        "type": "mongodb3 in",
        "z": "21a8425e13dab42c",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 880,
        "y": 2740,
        "wires": [
            [
                "a58b152d8de1d96e"
            ]
        ]
    },
    {
        "id": "3576eb3447903b33",
        "type": "inject",
        "z": "21a8425e13dab42c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "pair",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0C:AD:ER:BE:HU:15\"",
        "payloadType": "str",
        "x": 320,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "f28c6bf8d6f96704",
        "type": "inject",
        "z": "21a8425e13dab42c",
        "name": "Pseudo Paired",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"mac_address\":\"0C:AD:ER:BE:HU:15\",\"node_id\":1950750929,\"node_type\":\"sensor\",\"info\":\"pair success!\"}",
        "payloadType": "json",
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "a7c14fd86c07c7ce"
            ]
        ]
    },
    {
        "id": "145f9e3e3695fb1b",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out : res/mesh/pair",
        "info": "",
        "x": 610,
        "y": 960,
        "wires": []
    },
    {
        "id": "1329eb21ddbcd46a",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Pseudo Active Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"A8:46:74:46:18:DC\": {\n            \"mac_address\": \"A8:46:74:46:18:DC\",\n            \"node_id\": 1950750941,\n            \"node_type\": \"relay\",\n            \"state\": {\n            \"r1\": true,\n            \"r2\": true\n            }\n        },\n        \"A8:46:74:46:18:D0\": {\n            \"mac_address\": \"A8:46:74:46:18:D0\",\n            \"node_id\": 1950750929,\n            \"node_type\": \"sensor\",\n            \"state\": {\n            \"gpio_0\": false,\n            \"gpio_1\": false,\n            \"gpio_3\": false\n            }\n        }\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2480,
        "wires": [
            [
                "49ccb5399f6fbf5c"
            ]
        ]
    },
    {
        "id": "b6d57abdebf1d40b",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Active Node Req",
        "func": "if (msg.type == \"ACTIVE_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2480,
        "wires": [
            [
                "1329eb21ddbcd46a"
            ]
        ]
    },
    {
        "id": "49ccb5399f6fbf5c",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Active Node Res",
        "func": "msg.type = \"ACTIVE_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2480,
        "wires": [
            [
                "5d5e081255e5400f"
            ]
        ]
    },
    {
        "id": "050385fb855fa0ec",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Pseudo All Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"A8:46:74:46:18:DC\": {\n            \"mac_address\": \"A8:46:74:46:18:DC\",\n            \"node_id\": 1950750941,\n            \"node_type\": \"relay\"\n        },\n        \"A8:46:74:46:18:D0\": {\n            \"mac_address\": \"A8:46:74:46:18:D0\",\n            \"node_id\": 1950750929,\n            \"node_type\": \"sensor\"\n        }\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2120,
        "wires": [
            [
                "89f3795d48cf061f"
            ]
        ]
    },
    {
        "id": "9c5c5015ec2c6c99",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter All Node Req",
        "func": "if (msg.type == \"ALL_NODE\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2120,
        "wires": [
            [
                "050385fb855fa0ec"
            ]
        ]
    },
    {
        "id": "89f3795d48cf061f",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter All Node Res",
        "func": "msg.type = \"ALL_NODE\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2120,
        "wires": [
            [
                "2c782a9585346e96"
            ]
        ]
    },
    {
        "id": "a1d8ca7e2539a46b",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Req Mongo",
        "func": "if (msg.type == \"MONGO_DB\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2620,
        "wires": [
            [
                "e07b8919c4efb01b"
            ]
        ]
    },
    {
        "id": "a58b152d8de1d96e",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Res Mongo",
        "func": "msg.type = \"MONGO_DB\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2620,
        "wires": [
            [
                "2528679df8f1d904"
            ]
        ]
    },
    {
        "id": "eb728879abec346b",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Mongo",
        "func": "if (msg.toMongo){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 380,
        "wires": [
            [
                "bf440c1e683adfe8"
            ]
        ]
    },
    {
        "id": "bf440c1e683adfe8",
        "type": "mongodb3 in",
        "z": "21a8425e13dab42c",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 800,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "07f272fefb259c97",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt in : req/mesh/allnodes",
        "info": "",
        "x": 720,
        "y": 2060,
        "wires": []
    },
    {
        "id": "1683109f5d316a24",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out : req/mesh/allnodes",
        "info": "",
        "x": 980,
        "y": 2060,
        "wires": []
    },
    {
        "id": "8e24863e88bdb2a6",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt in : req/mesh/nodes",
        "info": "",
        "x": 730,
        "y": 2540,
        "wires": []
    },
    {
        "id": "5381cdf40f2fa34b",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out : req/mesh/nodes",
        "info": "",
        "x": 1010,
        "y": 2540,
        "wires": []
    },
    {
        "id": "2f85f4145a318f60",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 760,
        "y": 1800,
        "wires": []
    },
    {
        "id": "a4b2c41747bf0586",
        "type": "comment",
        "z": "21a8425e13dab42c",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 950,
        "y": 1800,
        "wires": []
    },
    {
        "id": "d5b0aecd390d054e",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1840,
        "wires": [
            [
                "53b8573bfdf79ac5"
            ]
        ]
    },
    {
        "id": "e297a3b9ae1cbcbd",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Ping",
        "func": "if (msg.type == \"PING\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1980,
        "wires": [
            [
                "d5b0aecd390d054e"
            ]
        ]
    },
    {
        "id": "53b8573bfdf79ac5",
        "type": "function",
        "z": "21a8425e13dab42c",
        "name": "Filter Pong",
        "func": "msg.type = \"PONG\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1980,
        "wires": [
            [
                "d4f41d69dae99d15"
            ]
        ]
    },
    {
        "id": "f039a5f9b0d9718d",
        "type": "ui_spacer",
        "z": "21a8425e13dab42c",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "2f692e7cb40097ed",
        "type": "ui-group",
        "name": "Login Group",
        "page": "f721a59bf36641c2",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8146a75c4508b858",
        "type": "ui-group",
        "name": "Scan Group",
        "page": "b5fbde398eca86ab",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "dd337cb0663d76c3",
        "type": "ui-group",
        "name": "Home",
        "page": "b820a1f0025766bd",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "013c016d2aaac063",
        "type": "mongodb3",
        "uri": "mongodb+srv://tuwaris:5D4Wyu40hIK64EFh@tuwaris.5ynbx.mongodb.net/smart_home?retryWrites=true&w=majority&appName=Tuwaris",
        "name": "smart_home",
        "options": "{ “useNewUrlParser”: true}",
        "parallelism": -1
    },
    {
        "id": "f721a59bf36641c2",
        "type": "ui-page",
        "name": "Login",
        "ui": "9c6816c5eb8f8852",
        "path": "/login",
        "icon": "login",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b5fbde398eca86ab",
        "type": "ui-page",
        "name": "Scan",
        "ui": "9c6816c5eb8f8852",
        "path": "/scan",
        "icon": "wifi",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b820a1f0025766bd",
        "type": "ui-page",
        "name": "Home",
        "ui": "9c6816c5eb8f8852",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6816c5eb8f8852",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "6ba0f05d9b3e74ec",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#a2af9b",
            "primary": "#dccfc0",
            "bgPage": "#faf9ee",
            "groupBg": "#eeeeee",
            "groupOutline": "#e3e3e3"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "ba48214f318dbb34",
        "type": "global-config",
        "env": [],
        "modules": {
            "@flowfuse/node-red-dashboard": "1.27.2",
            "node-red-contrib-mongodb3": "2.0.1",
            "node-red-dashboard": "3.6.6"
        }
    }
]