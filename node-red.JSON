[
    {
        "id": "c116c483d477e9f2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dfe928946370da7d",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 840,
        "y": 1460,
        "wires": [
            [
                "ba9cb9dc5a536c72",
                "7684725afed8dad3"
            ]
        ]
    },
    {
        "id": "7f8d62b38dd8b488",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 1920,
        "y": 1380,
        "wires": [
            [
                "e68e742b0a1497fd"
            ]
        ]
    },
    {
        "id": "7534874c78904722",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 1840,
        "y": 1220,
        "wires": [
            [
                "7f8d62b38dd8b488"
            ]
        ]
    },
    {
        "id": "ba9cb9dc5a536c72",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 900,
        "y": 1220,
        "wires": [
            [
                "24986f63df9be572"
            ]
        ]
    },
    {
        "id": "7684725afed8dad3",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 900,
        "y": 1600,
        "wires": [
            [
                "fc9778b4682d6278",
                "b4fba4be07528b75"
            ]
        ]
    },
    {
        "id": "b4fba4be07528b75",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 980,
        "y": 1840,
        "wires": [
            [
                "667dfc1727752ae9"
            ]
        ]
    },
    {
        "id": "e415fbb3d7b1a359",
        "type": "junction",
        "z": "c116c483d477e9f2",
        "x": 1860,
        "y": 1600,
        "wires": [
            [
                "7f8d62b38dd8b488"
            ]
        ]
    },
    {
        "id": "120961589ce4728a",
        "type": "ui-template",
        "z": "c116c483d477e9f2",
        "group": "2f692e7cb40097ed",
        "page": "",
        "ui": "",
        "name": "Login Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template class=\"bg-black-100\">\n  <div class=\"flex flex-col items-center justify-center h-full p-6\">\n    <h2 class=\"text-2xl font-bold mb-4\">Login</h2>\n    <v-text-field v-model=\"username\" label=\"Username\" outlined></v-text-field>\n    <v-text-field v-model=\"password\" label=\"Password\" type=\"password\" outlined></v-text-field>\n    <p v-if=\"error\" class=\"text-red-500 mt-2\">{{ error }}</p>\n    <v-btn class=\"mt-4\" color=\"primary\" @click=\"login\">Login</v-btn>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n  },\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"true\") {\n      this.redirectScan();\n    }\n  },\n  watch: {\n    msg(newMsg) {\n      if (newMsg && newMsg.payload) {\n        const user = newMsg.payload;\n        if (this.username === user.username && this.password === user.password) {\n          this.error = \"\";\n          localStorage.setItem(\"loggedIn\", \"true\");\n          this.redirectScan();\n        } else {\n          this.error = \"Invalid username or password\";\n        }\n      }\n    }\n  },\n  methods: {\n    login() {\n      const sendObj = {\n        collection: \"users\",\n        payload: { username: this.username },\n        operation: \"findOne\"\n      };\n      this.send(sendObj);\n    },\n    redirectScan() {\n      // tell Node-RED to switch tab via ui-control\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/scan`;\n    }\n  }\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 2140,
        "wires": [
            [
                "2d2e42fc750689bb"
            ]
        ]
    },
    {
        "id": "e68e742b0a1497fd",
        "type": "ui-template",
        "z": "c116c483d477e9f2",
        "group": "8146a75c4508b858",
        "page": "",
        "ui": "",
        "name": "Scan Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n  <div class=\"mesh-detail\">\n    <!-- Top action buttons: one left, one right -->\n    <div class=\"top-buttons d-lg-flex d-sm-block justify-space-between align-center\">\n      <strong class=\"text-h6 font-weight-bold text-uppercase text-blue-grey-darken-4\">\n          status : \n          <span :class=\"master_status === 'online' ? 'text-teal' : 'text-red-darken-2'\">\n            {{ master_status }}\n          </span>\n        </strong>\n      <div>\n        <v-btn\n          outlined\n          @click=\"scanNodes\"\n          style=\"background-color: #a2af9b; color: black\"\n          class=\"font-weight-bold text-subtitle-1 text-blue-grey-darken-4 mr-4\"\n        >\n          SCAN\n        </v-btn>\n\n        <v-btn\n        color=\"red-darken-1\"\n        outlined\n        @click=\"deleteAllNodes\"\n        class=\"font-weight-bold text-subtitle-1\"\n      >\n        RESET !\n      </v-btn>\n      </div>\n    </div>\n\n    <!-- Nodes displayed inline (only mesh_slave: false) -->\n    <div class=\"nodes-container pa-4 rounded-lg\" style=\"background-color: #a2af9b;\">\n      <div\n        v-for=\"(node, index) in nodes_detected.filter(n => !n.mesh_slave)\"\n        :key=\"index\"\n        class=\"node-item\"\n      >\n        <!-- Dialog wrapping node button -->\n        <v-dialog\n          v-model=\"node.active\"\n          transition=\"dialog-bottom-transition\"\n          class=\"w-auto\"\n          style=\"max-width: 400px;\"\n        >\n          <template v-slot:activator=\"{ props: activatorProps }\">\n            <v-btn\n              v-bind=\"activatorProps\"\n              class=\"pt-2 pb-2\"\n              color=\"primary\"\n              outlined\n            >\n            <div class=\"d-lg-flex d-xs-block\">\n              <div class=\"mr-lg-4\">\n                Node Name: {{ node.display_name }}\n                <br /><br />\n                MAC Addr: {{ node.mac_address }}\n              </div>\n              <!-- Delete button stays on card -->\n              <v-btn\n                color=\"red-darken-1\"\n                small\n                class=\"\"\n                @click.stop=\"deleteNode(index)\"\n              >\n                Delete\n              </v-btn>\n            </div>\n            </v-btn>\n          </template>\n\n          <!-- Popup content -->\n          <v-card>\n            <v-toolbar title=\"New Slave\" style=\"background-color: #a2af9b;\"></v-toolbar>\n\n            <v-card-text>\n              <p class=\"mb-2\"><strong>Node Name:</strong> {{ node.display_name }}</p>\n              <p class=\"mb-2\"><strong>MAC Address:</strong> {{ node.mac_address }}</p>\n              <p>\n                <strong>Description:</strong>\n                <v-text-field v-model=\"description\" label=\"Description\" outlined class=\"mt-2\"></v-text-field>\n              </p>\n            </v-card-text>\n\n            <v-card-actions class=\"justify-space-between\">\n              <v-btn\n                @click=\"addSlave(node)\"\n                style=\"background-color: #a2af9b; color: black\"\n              >\n                Create\n              </v-btn>\n\n              <v-btn\n                @click=\"node.active = false\"\n                style=\"background-color: #90a4ae; color: black\"\n              >\n                Close\n              </v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    msg: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      nodes_detected: [],\n      description: \"\",\n      master_status: \"offline\",\n      ping_delay: 0,\n      ping_reqest: false, // filter msg ping\n      scan_reqest: false, // filter msg scan\n    };\n  },\n  mounted() {\n    // invoke logic function\n    this.checkStatus();\n    this.scanNodes();\n\n    // Load saved nodes from localStorage\n    const savedNodes = localStorage.getItem(\"nodes_detected\");\n    if (savedNodes) {\n      try {\n        this.nodes_detected = JSON.parse(savedNodes).map(n => ({\n          ...n,\n          active: false, // ensure active property exists\n        }));\n      } catch (e) {\n        console.error(\"Failed to parse nodes_detected from localStorage\", e);\n      }\n    }\n\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n      this.redirectLogin();\n    }\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        // node scan res handler\n        if (newMsg && newMsg.scan && this.scan_reqest) {\n          const payload = { ...newMsg.payload };\n          payload.result.forEach(item => {\n            const node = { \n              ...item, \n              mesh_slave: false, \n              active: false \n            };\n\n            const exists = this.nodes_detected.some(\n              n => n.mac_address === node.mac_address && n.display_name === node.display_name\n            );\n\n            if (!exists) {\n              this.nodes_detected.push(node);\n              console.log(\"New node detected:\", node);\n            }\n          });\n          this.scan_reqest = false; \n        }\n\n        // pong handler\n        if (newMsg && newMsg.pong && this.ping_reqest) {\n          this.master_status = \"online\"\n          if (this.ping_delay < 2) {\n            this.ping_delay += 2;\n          }\n          this.ping_reqest = false; \n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    },\n    deleteNode(index) {\n      this.nodes_detected.splice(index, 1);\n      localStorage.setItem(\n        \"nodes_detected\",\n        JSON.stringify(this.nodes_detected)\n      );\n    },\n    deleteAllNodes() {\n      if (confirm(\"Are you sure you want to delete all nodes?\")) {\n        this.nodes_detected = [];\n        localStorage.removeItem(\"nodes_detected\");\n        const sendObj = {\n          collection: \"nodes\",\n          operation: \"drop\",\n          toMongo: true\n        };\n        this.send(sendObj);\n      }\n    },\n    addSlave(node) {\n      // Close the dialog\n      node.active = false;\n\n      const sendObj = {\n        collection: \"nodes\",\n        payload: { \n          description: this.description, \n          display_name: node.display_name,\n          mac_address: node.mac_address\n        },\n        operation: \"insertOne\",\n        toMongo: true\n      };\n      this.send(sendObj);\n\n      // Set mesh_slave = true so it no longer appears in scan section\n      const targetNode = this.nodes_detected.find(\n        n => n.ip_address === node.ip_address && n.name === node.name\n      );\n      if (targetNode) {\n        targetNode.mesh_slave = true;\n        localStorage.setItem(\"nodes_detected\", JSON.stringify(this.nodes_detected));\n      }\n    },\n    checkStatus() {\n      // send ping payload to master node\n      setInterval(() => {\n      const sendObj = {\n        payload: \"ping\"\n      };\n      this.ping_reqest = true; \n      // online & offline logic\n      if (this.ping_delay == 0) {\n        this.master_status = \"offline\";\n      } else {\n        this.master_status = \"online\";\n        this.ping_delay -= 1;\n      }\n      this.send(sendObj);\n      }, 1000); // 1000 ms = 1 second\n    },\n    scanNodes() {\n      const sendObj = {\n        payload: \"scan\"\n      };\n      this.scan_reqest = true; \n      this.send(sendObj);\n    }\n  },\n};\n</script>\n\n<style scoped>\n.top-buttons {\n  margin: 10px;\n}\n\n.mesh-detail {\n  display: flex;\n  flex-direction: column;\n  margin: 10px;\n}\n\n.nodes-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.node-item {\n  display: inline-block;\n}\n</style>\n\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1380,
        "y": 1420,
        "wires": [
            [
                "dfe928946370da7d"
            ]
        ]
    },
    {
        "id": "2d2e42fc750689bb",
        "type": "mongodb3 in",
        "z": "c116c483d477e9f2",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 1220,
        "y": 2280,
        "wires": [
            [
                "120961589ce4728a"
            ]
        ]
    },
    {
        "id": "fc456404378d6aa7",
        "type": "ui-template",
        "z": "c116c483d477e9f2",
        "group": "dd337cb0663d76c3",
        "page": "",
        "ui": "",
        "name": "Slave Template",
        "order": 1,
        "width": 0,
        "height": 14,
        "head": "",
        "format": "<template>\n<div class=\"nodes-container pa-4 rounded-lg\" style=\"background-color: #a2af9b;\">\n    <div\n        v-for=\"(mesh, index) in mesh_list\"\n        :key=\"index\"\n        class=\"mesh-item\"\n    >\n        <v-container>\n    <v-dialog\n      transition=\"dialog-bottom-transition\"\n      width=\"auto\"\n    >\n      <template v-slot:activator=\"{ props: activatorProps }\">\n        <v-btn\n            v-bind=\"activatorProps\"\n            class=\"pt-2 pb-2\"\n            color=\"primary\"\n            outlined\n        >\n            <div class=\"mr-4 text-left\">\n                <p class=\"text-h6 font-weight-bold\" style=\"color:#415936\">Mesh Name: {{ mesh.mesh_name }}</p>\n                <p class=\"text-subtitle-2\">IP Addr: {{ mesh.ip_address }}</p>\n            </div>\n        </v-btn>\n      </template>\n      <template v-slot:default=\"{ isActive }\">\n        <v-card>\n          <v-toolbar title=\"Opening from the Top\"></v-toolbar>\n          <v-card-text class=\"text-h2 pa-12\">\n            Hello world!\n          </v-card-text>\n          <v-card-actions class=\"justify-end\">\n            <v-btn\n              text=\"Close\"\n              @click=\"isActive.value = false\"\n            ></v-btn>\n          </v-card-actions>\n        </v-card>\n      </template>\n    </v-dialog>\n  </v-container>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  mounted() {\n    if (localStorage.getItem(\"loggedIn\") === \"false\") {\n        this.redirectLogin();\n    }\n    const sendObj = {\n        collection: \"mesh\",\n        payload: { username: this.username },\n        operation: \"find.toArray\"\n      };\n    this.send(sendObj);\n  },\n  data() {\n    return {\n      mesh_list: {}\n    };\n  },\n  watch: {\n    msg(newMsg) {\n        // receive mesh api\n        if (newMsg && typeof newMsg === \"object\") {\n            this.mesh_list = newMsg.payload;\n        }\n    }\n  },\n  methods: {\n    redirectLogin() {\n      const base = window.location.origin;\n      window.location.href = `${base}/dashboard/login`;\n    }\n  }\n};\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1560,
        "y": 2140,
        "wires": [
            [
                "875bec25d74fcd71"
            ]
        ]
    },
    {
        "id": "875bec25d74fcd71",
        "type": "mongodb3 in",
        "z": "c116c483d477e9f2",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 1560,
        "y": 2280,
        "wires": [
            [
                "fc456404378d6aa7"
            ]
        ]
    },
    {
        "id": "f7acc26284cc0ce4",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Pseudo Scan Node",
        "func": "if (msg.payload) {\n    msg.payload = {\n        \"result\": [\n            {\n                mac_address: \"10:b4:1d:14:1e:ba\",\n                display_name: \"MeshNode_Relay\"\n            },\n            {\n                mac_address: \"10:b5:1d:15:1e:aa\",\n                display_name: \"MeshNode_Sensor\"\n            }\n        ]\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "aada27ba84381516"
            ]
        ]
    },
    {
        "id": "400b69456212589b",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt in : esp/ping",
        "info": "",
        "x": 1260,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b7c3e9d32870f79e",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt out : esp/pong",
        "info": "",
        "x": 1450,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ceaeaf779329e66d",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Pseudo Ping Pong",
        "func": "if (msg.payload) {\n    msg.payload = \"alive\"\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1080,
        "wires": [
            [
                "1b98244503c45fdb"
            ]
        ]
    },
    {
        "id": "24986f63df9be572",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Ping",
        "func": "if (msg.payload == \"ping\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1220,
        "wires": [
            [
                "ceaeaf779329e66d"
            ]
        ]
    },
    {
        "id": "438c6d4ea9fea350",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt in : req/mesh/scan",
        "info": "",
        "x": 1280,
        "y": 1700,
        "wires": []
    },
    {
        "id": "59bb6a5497093d3c",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt out  : res/mesh/scan",
        "info": "",
        "x": 1510,
        "y": 1700,
        "wires": []
    },
    {
        "id": "fc9778b4682d6278",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Scan Req",
        "func": "if (msg.payload == \"scan\") {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1600,
        "wires": [
            [
                "f7acc26284cc0ce4"
            ]
        ]
    },
    {
        "id": "1b98244503c45fdb",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Pong",
        "func": "msg.scan = false;\nmsg.pong = true;\nmsg.info = false;\nmsg.pairing = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1220,
        "wires": [
            [
                "7534874c78904722"
            ]
        ]
    },
    {
        "id": "aada27ba84381516",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Scan Res",
        "func": "msg.scan = true;\nmsg.pong = false;\nmsg.info = false;\nmsg.pairing = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1600,
        "wires": [
            [
                "e415fbb3d7b1a359"
            ]
        ]
    },
    {
        "id": "667dfc1727752ae9",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Mongo",
        "func": "if (msg.toMongo){\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1840,
        "wires": [
            [
                "b1c9b176dc758185"
            ]
        ]
    },
    {
        "id": "b1c9b176dc758185",
        "type": "mongodb3 in",
        "z": "c116c483d477e9f2",
        "service": "_ext_",
        "configNode": "013c016d2aaac063",
        "name": "mongoDB",
        "collection": "",
        "operation": "",
        "x": 1460,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "28e83475b856147f",
        "type": "debug",
        "z": "c116c483d477e9f2",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1100,
        "wires": []
    },
    {
        "id": "56d30646183daf4e",
        "type": "inject",
        "z": "c116c483d477e9f2",
        "name": "Pseudo Paired",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"mac_address\":\"10:B4:1D:14:1E:B8\",\"node_id\":487857849,\"node_type\":\"relay\",\"capabilities\":{\"relays\":[{\"id\":\"r1\",\"name\":\"relay1\"},{\"id\":\"r2\",\"name\":\"relay2\"}]}}",
        "payloadType": "json",
        "x": 1260,
        "y": 940,
        "wires": [
            [
                "4ebdc4452b22b6c0"
            ]
        ]
    },
    {
        "id": "41b2d5c2a3398fe1",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt out : mesh/node/info",
        "info": "",
        "x": 1270,
        "y": 900,
        "wires": []
    },
    {
        "id": "4ebdc4452b22b6c0",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Scan Req",
        "func": "msg.scan = false;\nmsg.pong = false;\nmsg.info = true;\nmsg.pairing = false;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "4e2e2a90df49961a",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Pseudo Pairing",
        "func": "return msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 2000,
        "wires": [
            [
                "088faf8d864deb37"
            ]
        ]
    },
    {
        "id": "088faf8d864deb37",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Parir Res",
        "func": "msg.scan = false;\nmsg.pong = false;\nmsg.info = false;\nmsg.pairing = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "658d3b40f99ecc2e",
        "type": "function",
        "z": "c116c483d477e9f2",
        "name": "Filter Pair Req",
        "func": "if (msg.pair) {\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1960,
        "wires": [
            [
                "4e2e2a90df49961a"
            ]
        ]
    },
    {
        "id": "30ac6003178506f5",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt in : ",
        "info": "",
        "x": 1230,
        "y": 2000,
        "wires": []
    },
    {
        "id": "206155495e1e9664",
        "type": "comment",
        "z": "c116c483d477e9f2",
        "name": "mqtt out : ",
        "info": "",
        "x": 1580,
        "y": 2000,
        "wires": []
    },
    {
        "id": "bf25ab4ec1cdd6bb",
        "type": "inject",
        "z": "c116c483d477e9f2",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ping",
        "payloadType": "str",
        "x": 970,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "d045ac7fcda4662d",
        "type": "ui_spacer",
        "z": "c116c483d477e9f2",
        "name": "spacer",
        "group": "",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "2f692e7cb40097ed",
        "type": "ui-group",
        "name": "Login Group",
        "page": "f721a59bf36641c2",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8146a75c4508b858",
        "type": "ui-group",
        "name": "Scan Group",
        "page": "b5fbde398eca86ab",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "013c016d2aaac063",
        "type": "mongodb3",
        "uri": "mongodb+srv://tuwaris:5D4Wyu40hIK64EFh@tuwaris.5ynbx.mongodb.net/smart_home?retryWrites=true&w=majority&appName=Tuwaris",
        "name": "smart_home",
        "options": "{ “useNewUrlParser”: true}",
        "parallelism": -1
    },
    {
        "id": "dd337cb0663d76c3",
        "type": "ui-group",
        "name": "Slave",
        "page": "b820a1f0025766bd",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f721a59bf36641c2",
        "type": "ui-page",
        "name": "Login",
        "ui": "9c6816c5eb8f8852",
        "path": "/login",
        "icon": "login",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b5fbde398eca86ab",
        "type": "ui-page",
        "name": "Scan",
        "ui": "9c6816c5eb8f8852",
        "path": "/scan",
        "icon": "wifi",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b820a1f0025766bd",
        "type": "ui-page",
        "name": "Slave",
        "ui": "9c6816c5eb8f8852",
        "path": "/mesh",
        "icon": "device",
        "layout": "grid",
        "theme": "6ba0f05d9b3e74ec",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9c6816c5eb8f8852",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "6ba0f05d9b3e74ec",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#a2af9b",
            "primary": "#dccfc0",
            "bgPage": "#faf9ee",
            "groupBg": "#eeeeee",
            "groupOutline": "#e3e3e3"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "cb528f369b72bb23",
        "type": "global-config",
        "env": [],
        "modules": {
            "@flowfuse/node-red-dashboard": "1.27.2",
            "node-red-contrib-mongodb3": "2.0.1",
            "node-red-dashboard": "3.6.6"
        }
    }
]